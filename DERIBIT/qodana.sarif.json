{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PC",
          "fullName": "Qodana",
          "version": "241.14494.241",
          "rules": [],
          "taxa": [
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "Markdown",
              "name": "Markdown"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "ReST",
              "name": "ReST"
            },
            {
              "id": "Qodana",
              "name": "Qodana"
            },
            {
              "id": "Python/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "Python",
                    "index": 0,
                    "toolComponent": {
                      "name": "PC"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "TOML",
              "name": "TOML"
            },
            {
              "id": "Security",
              "name": "Security"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "PythonCore",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "PyPandasSeriesToListInspection",
                "shortDescription": {
                  "text": "Method Series.to_list() is recommended"
                },
                "fullDescription": {
                  "text": "Reports redundant 'list' in 'list(Series.values)' statement for pandas and polars libraries. Such 'Series' values extraction can be replaced with the 'to_list()' function call. Example: list(df['column'].values)\n When the quick-fix is applied, the code changes to: df['column'].to_list()",
                  "markdown": "Reports redundant `list` in `list(Series.values)` statement for pandas and polars libraries.\nSuch `Series` values extraction can be replaced with the `to_list()` function call.\n\n**Example:**\n\n```\nlist(df['column'].values)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndf['column'].to_list()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPackages",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: 'def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])' When the quick-fix is applied, the code changes to: 'def do_mult(a, b):\n    c = a * b\n    return {c, a, b}'",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n\n    def do_mult(a, b):\n        c = a * b\n        return set([c, a, b])\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def do_mult(a, b):\n        c = a * b\n        return {c, a, b}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PySetFunctionToLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: 'class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect' In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n\n    class Car:\n        def __init__(self, speed=0):\n            self.speed = speed\n            self.time # has no effect\n\n    2 + 3 # has no effect\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStatementEffect",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: 'class Book(object):\n    def __init__(self):\n        pass' When the quick-fix is applied, the missing comment is added: '# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass'",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n\n    class Book(object):\n        def __init__(self):\n            pass\n\nWhen the quick-fix is applied, the missing comment is added:\n\n\n    # coding=utf-8\n    class Book(object):\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMandatoryEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverridesInspection",
                "shortDescription": {
                  "text": "Invalid usages of @override decorator"
                },
                "fullDescription": {
                  "text": "Reports when a method decorated with @override doesn't have a matching method in its ancestor classes Example: 'from typing import override\n\nclass Parent:\n    def foo(self) -> int:\n        return 1\n\n    def bar(self, x: str) -> str:\n        return x\n\nclass Child(Parent):\n    @override\n    def foo(self) -> int:\n        return 2\n\n    @override # Missing super method for override function\n    def baz(self) -> int:\n        return 1'",
                  "markdown": "Reports when a method decorated with @override doesn't have a matching method in its ancestor classes\n\n**Example:**\n\n\n    from typing import override\n\n    class Parent:\n        def foo(self) -> int:\n            return 1\n\n        def bar(self, x: str) -> str:\n            return x\n\n    class Child(Parent):\n        @override\n        def foo(self) -> int:\n            return 2\n\n        @override # Missing super method for override function\n        def baz(self) -> int:\n            return 1\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOverrides",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInconsistentIndentation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example: 'class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'' When the quick-fix is applied, the code sample changes to: 'class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass'",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n\n        class Book:\n        def __init__(self):\n            self.author = 'Mark Twain'\n\n        def release(self):\n            self.year = '1889'\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n\n        class Book:\n        def __init__(self):\n            self.year = '1889'\n            self.author = 'Mark Twain'\n\n        def release(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAttributeOutsideInit",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: 'from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str''",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n\n    from typing import TypedDict\n\n\n    class Movie(TypedDict):\n        name: str\n        year: int\n        rate: int = 10  # Right-hand side values are not supported\n\n        def method(self): # Invalid statement in TypedDict\n            pass\n\n\n    m = Movie(name=\"name\", year=1000, rate=9)\n    print(m[\"director\"])  # There is no the 'director' key in 'Movie'\n    del m[\"name\"]  # The 'name' key cannot be deleted\n    m[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypedDict",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPep8",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMissingTypeHints",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. Example: 't = ('red', 'blue', 'green', 'white')\nt[3] = 'black'' A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    t[3] = 'black'\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTupleItemAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: 'class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass' If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n\n    class MyClass(object):\n        def __new__(cls, arg1):\n            return super().__new__(cls)\n\n        def __init__(self):\n            pass\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInitNewSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: 'class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam''",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n\n    class Foo:\n        __slots__ = ['foo', 'bar']\n\n\n    foo = Foo()\n    foo.baz = 'spam'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDunderSlots",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: 'def func(s, cache={}):\n    cache[s] = None' When the quick-fix is applied, the code changes to: 'def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None'",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n\n    def func(s, cache={}):\n        cache[s] = None\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def func(s, cache=None):\n        if cache is None:\n            cache = {}\n        cache[s] = None\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDefaultArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: 'class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass' The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: 'class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()'",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            pass\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            super().__init__()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMissingConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestUnpassedFixtureInspection",
                "shortDescription": {
                  "text": "Fixture is not requested by test functions"
                },
                "fullDescription": {
                  "text": "Reports if a fixture is used without being passed to test function parameters or to '@pytest.mark.usefixtures' decorator",
                  "markdown": "Reports if a fixture is used without being passed to test function parameters or to `@pytest.mark.usefixtures` decorator"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTestUnpassedFixture",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: 'def len(a, b, c):\n    d = a + b + c\n    return d' In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n\n    def len(a, b, c):\n        d = a + b + c\n        return d\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyShadowingBuiltins",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: 'def func(s):\n    if s.isdigit() == True:\n        return int(s)' With the quick-fix applied, the code fragment will be simplified to: 'def func(s):\n    if s.isdigit():\n        return int(s)'",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n\n    def func(s):\n        if s.isdigit() == True:\n            return int(s)\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n\n    def func(s):\n        if s.isdigit():\n            return int(s)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PySimplifyBooleanCheck",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PoetryPackageVersionsInspection",
                "shortDescription": {
                  "text": "Poetry package versions"
                },
                "fullDescription": {
                  "text": "Reports outdated versions of packages in '[tool.poetry.dependencies]' and '[tool.poetry.dev-dependencies]' sections of 'pyproject.toml'.",
                  "markdown": "Reports outdated versions of packages in `[tool.poetry.dependencies]` and `[tool.poetry.dev-dependencies]`\nsections of `pyproject.toml`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PoetryPackageVersions",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: 'class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass' Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n\n    class Book:\n        def add_title(self):\n            pass\n\n\n    class Novel(Book):\n        def add_title(self, text):\n            pass\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMethodOverriding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTestParametrized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: 'class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass' The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: 'class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass'",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    @classmethod\n    def change_state(self):\n        pass\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    def change_state(self):\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDecorator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: 'async def bar():\n    pass\n\n\nasync def foo():\n    bar()' After the quick-fix is applied, the code changes to: 'async def bar():\n    pass\n\n\nasync def foo():\n    await bar()'",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        bar()\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        await bar()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyAsyncCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RestRoleInspection",
                "shortDescription": {
                  "text": "Role is not defined"
                },
                "fullDescription": {
                  "text": "Reports undefined roles in reStructuredText files. Example: '.. role:: custom\n.. role:: newcustom(emphasis)\n\nAn example of using :custom:`interpreted text`\nAn example of using :newcustom:`interpreted text`\nAn example of using :emphasis:`interpreted text`\n\n\nSome text using undefined role :undef:`interpreted text`'",
                  "markdown": "Reports undefined roles in reStructuredText files.\n\n**Example:**\n\n\n    .. role:: custom\n    .. role:: newcustom(emphasis)\n\n    An example of using :custom:`interpreted text`\n    An example of using :newcustom:`interpreted text`\n    An example of using :emphasis:`interpreted text`\n\n\n    Some text using undefined role :undef:`interpreted text`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RestRoleInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "ReST",
                      "index": 11,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: 'a = 2\n\n\nif a == None:\n    print(\"Success\")' Once the quick-fix is applied, the code changes to: 'a = 2\n\n\nif a is None:\n    print(\"Success\")'",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n\n    a = 2\n\n\n    if a == None:\n        print(\"Success\")\n\nOnce the quick-fix is applied, the code changes to:\n\n\n    a = 2\n\n\n    if a is None:\n        print(\"Success\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyComparisonWithNone",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommandLineInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: Example: 'class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()'",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n**Example:**\n\n\n    class Record:\n        @property\n        def as_json(self):\n\n    json = Record().as_json()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyCallingNonCallable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: 'if True:\n    print('Yes')\nelse:\n    print('No')' As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n\n    if True:\n        print('Yes')\n    else:\n        print('No')\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnreachableCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyChainedComparisons",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: 'class Movie:\n\n   def show():\n       pass' When the quick-fix is applied, the code changes to: 'class Movie:\n\n   def show(self):\n       pass' The inspection also reports naming issues in class methods. Example: 'class Movie:\n    @classmethod\n    def show(abc):\n        pass' Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n\n    class Movie:\n\n       def show():\n           pass\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Movie:\n\n       def show(self):\n           pass\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n\n    class Movie:\n        @classmethod\n        def show(abc):\n            pass\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMethodParameters",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyDocstringTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyCompatibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: 'def foo():\n    global bar\n    print(bar)\n\nfoo()' As a fix, you can move the global variable declaration: 'global bar\n\n\ndef foo():\n    print(bar)'",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n\n    def foo():\n        global bar\n        print(bar)\n\n    foo()\n\nAs a fix, you can move the global variable declaration:\n\n\n    global bar\n\n\n    def foo():\n        print(bar)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyGlobalUndefined",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: 'class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self' As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n\n    class Account:\n        def calc(self, balance):\n            if balance == 0:\n                self = balance\n            return self\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMethodFirstArgAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNewStyleGenericSyntaxInspection",
                "shortDescription": {
                  "text": "Invalid usage of new-style type parameters and type aliases"
                },
                "fullDescription": {
                  "text": "Reports invalid usage of PEP 695 type parameter syntax Finds the following problems in function and class definitions and new-style type alias statements: Extending typing.Generic in new-style generic classes Extending parameterized typing.Protocol in new-style generic classes Using generic upper bounds and constraints with type parameters for ParamSpec and TypeVarTuple Mixing traditional and new-style type variables Using traditional type variables in new-style type aliases Examples: 'from typing import Generic\n\n  class Example[T](Generic[T]): ... # Classes with type parameter list should not extend 'Generic'' 'class Example[T: (list[S], str)]: ... # Generic types are not allowed inside constraints and bounds of type parameters' 'from typing import TypeVar\n\n  K = TypeVar(\"K\")\n\n  class ClassC[V]:\n      def method2[M](self, a: M, b: K) -> M | K: ... # Mixing traditional and new-style TypeVars is not allowed'",
                  "markdown": "Reports invalid usage of [PEP 695](https://www.python.org/dev/peps/pep-0695/) type parameter syntax\n\n\nFinds the following problems in function and class definitions and new-style type alias statements:\n\n* Extending typing.Generic in new-style generic classes\n* Extending parameterized typing.Protocol in new-style generic classes\n* Using generic upper bounds and constraints with type parameters for ParamSpec and TypeVarTuple\n* Mixing traditional and new-style type variables\n* Using traditional type variables in new-style type aliases\n\n\nExamples:\n\n\n      from typing import Generic\n\n      class Example[T](Generic[T]): ... # Classes with type parameter list should not extend 'Generic'\n\n\n      class Example[T: (list[S], str)]: ... # Generic types are not allowed inside constraints and bounds of type parameters\n\n\n      from typing import TypeVar\n\n      K = TypeVar(\"K\")\n\n      class ClassC[V]:\n          def method2[M](self, a: M, b: K) -> M | K: ... # Mixing traditional and new-style TypeVars is not allowed\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNewStyleGenericSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: 'from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass'",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n\n    from typing import Protocol\n\n\n    class MyProtocol(Protocol):\n        def method(self, p: int) -> str:\n            pass\n\n\n    class MyClass(MyProtocol):\n        def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n            pass\n\n\n    class MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n        pass\n\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyProtocol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: 'from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass' Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n\n    from typing import TypeVar\n\n    T0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\n    def b(p: int) -> int:  # Type specified both in a comment and annotation\n        # type: (int) -> int\n        pass\n\n\n    def c(p1, p2): # Type signature has too many arguments\n        # type: (int) -> int\n        pass\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypeHints",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: 'class MyClass(object):\n    def my_method(self, x):\n        print(x)' If a Make function from method quick-fix is applied, the code changes to: 'def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass' If you select the Make method static quick-fix, the '@staticmethod' decorator is added: 'class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)'",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n\n    class MyClass(object):\n        def my_method(self, x):\n            print(x)\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n\n    def my_method(x):\n        print(x)\n\n\n    class MyClass(object):\n        pass\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n\n    class MyClass(object):\n        @staticmethod\n        def my_method(x):\n            print(x)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMethodMayBeStatic",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: 't = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t' As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    (c1, c2, c3) = t\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTupleAssignmentBalance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: 'class Book():\n    pass' The quick-fix adds the '__init__' method: 'class Book():\n    def __init__(self):\n        pass'",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n\n    class Book():\n        pass\n\nThe quick-fix adds the `__init__` method:\n\n\n    class Book():\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyClassHasNoInit",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: 'def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)'",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n\n    def my_function(a: int = 2):\n        print(a)\n\n\n    my_function(2)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyArgumentEqualDefault",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassVarInspection",
                "shortDescription": {
                  "text": "Invalid usage of ClassVar variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of ClassVar annotations. Example: 'from typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance'",
                  "markdown": "Reports invalid usages of [ClassVar](https://docs.python.org/3/library/typing.html#typing.ClassVar) annotations.\n\n**Example:**\n\n\n    from typing import ClassVar\n\n\n    class Cat:\n        color: ClassVar[str] = \"white\"\n        weight: int\n\n        def __init__(self, weight: int):\n            self.weight = weight\n\n\n    Cat.color = \"black\"  # OK\n    my_cat = Cat(5)\n    my_cat.color = \"gray\"  # Error, setting class variable on instance\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyClassVar",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: 'dic = {}\ndic['var'] = 1' When the quick-fix is applied, the code changes to: 'dic = {'var': 1}'",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n\n    dic = {}\n    dic['var'] = 1\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    dic = {'var': 1}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyDictCreation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: '\"Hello {1}\".format(\"people\")' Example 2: 'def bar():\n    return 1\n\n\n\"%s %s\" % bar()' As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n\n    \"Hello {1}\".format(\"people\")\n\n**Example 2:**\n\n\n    def bar():\n        return 1\n\n\n    \"%s %s\" % bar()\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStringFormat",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: 'class A:\n    pass\n\n\ndef me_exception():\n    raise A()' The proposed quick-fix changes the code to: 'class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()'",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n\n    class A:\n        pass\n\n\n    def me_exception():\n        raise A()\n\nThe proposed quick-fix changes the code to:\n\n\n    class A(Exception):\n        pass\n\n\n    def me_exception():\n        raise A()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyExceptionInherit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop. Example: 'for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)' It also warns you if a variable declared in the 'with' statement is redeclared inside the statement body: 'with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:'",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop.\n\n**Example:**\n\n\n        for i in range(5):\n          for i in range(20, 25):\n              print(\"Inner\", i)\n          print(\"Outer\", i)\n      \nIt also warns you if a variable declared in the `with` statement is redeclared inside the statement body:\n\n\n        with open(\"file\") as f:\n          f.read()\n          with open(\"file\") as f:\n      \n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAssignmentToLoopOrWithParameter",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: 'a = 1\nfrom __future__ import print_function\nprint()' When the quick-fix is applied, the code changes to: 'from __future__ import print_function\n\na = 1\nprint()'",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n\n    a = 1\n    from __future__ import print_function\n    print()\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    from __future__ import print_function\n\n    a = 1\n    print()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyFromFutureImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: 'def print_string(s):\n  print(s.abc())' In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n\n    def print_string(s):\n      print(s.abc())\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnresolvedReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: 'class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle' As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n\n    class Figure:\n        def color(self):\n            pass\n\n\n    class Rectangle(Figure):\n        def color(self):\n            pass\n\n\n    class Square(Figure):\n        def color(self):\n            return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PySuperArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPackageRequirements",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: 'class A(object):\n# №5\n    def __init__(self):\n        pass' In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: '# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass'",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n\n    class A(object):\n    # №5\n        def __init__(self):\n            pass\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n\n    # coding=utf-8\n    class A(object)\n    # №5\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNonAsciiChar",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyRedundantParentheses",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: 'def my_func(a):\n    c = a ** 2;\n    return c' IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: 'def my_func(a):\n    c = a ** 2\n    return c'",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n\n    def my_func(a):\n        c = a ** 2;\n        return c\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n\n    def my_func(a):\n        c = a ** 2\n        return c\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTrailingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: 'from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass' When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: 'from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass'",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_triangle(self):\n            pass\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_figure(self):\n            pass\n\n        def do_triangle(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAbstractClass",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOldStyleClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: 'class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument' The correct code fragment looks at follows: 'class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")'",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__() # unfilled parameter\n    bar(5, \"#\") # unexpected argument\n\nThe correct code fragment looks at follows:\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__(5)\n    bar(5, p2=\"#\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyArgumentList",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInterpreter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyBroadException",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: 'def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int' With the quick-fix, you can modify the problematic types: 'def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()'",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n\n    def foo() -> int:\n        return \"abc\" # Expected int, got str\n\n\n    a: str\n    a = foo() # Expected str, got int\n\nWith the quick-fix, you can modify the problematic types:\n\n\n    def foo() -> str:\n        return \"abc\"\n\n\n    a: str\n    a = foo()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypeChecker",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: 'class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read'",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n\n    class MyClass:\n        @property\n        def read_only(self): return None\n\n        def __write_only_setter(self, value): pass\n\n        write_only = property(None, __write_only_setter)\n\n\n    a = MyClass()\n    a.read_only = 10 # property cannot be set\n    del a.read_only # property cannot be deleted\n    print(a.write_only) # property cannot be read\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStubPackagesAdvertiser",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n\n\n      s = b'№5'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyByteLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPackages",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: 'a = 23\nb = 3\na = a + b' After the quick-fix is applied, the code changes to: 'a = 23\nb = 3\na += b'",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n\n    a = 23\n    b = 3\n    a = a + b\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    a = 23\n    b = 3\n    a += b\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAugmentAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: 'class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)'",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n\n    class Foo:\n        @property\n        def bar(self):\n            import warnings\n            warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n            return 5\n\n\n    foo = Foo()\n    print(foo.bar)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: 'a = ('first', \\\n     'second', 'third')' When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n\n    a = ('first', \\\n         'second', 'third')\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnnecessaryBackslash",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: 'def x(): pass\n\n\nx = 2' It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n\n    def x(): pass\n\n\n    x = 2\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyRedeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: 'def outer(p):\n    def inner(p):\n        pass' As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n\n    def outer(p):\n        def inner(p):\n            pass\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyShadowingNames",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: 'from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass'",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n\n    from typing import final\n\n\n    @final\n    class A:\n        def a_method(self):\n            pass\n\n\n    class B(A):\n        def a_method(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. Example: 'class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method'",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n**Example:**\n\n\n    class Foo:\n        def _protected_method(self):\n            pass\n\n\n    class Bar(Foo):\n        def public_method(self):\n            self._protected_method()\n\n\n    foo = Foo()\n    foo._protected_method() # Access to a protected method\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyProtectedMember",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStubPackagesCompatibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: 'x = 0\nif x > 10:\n    b = 3\nprint(b)' The IDE reports a problem for 'print(b)'. A possible fix is: 'x = 0\nif x > 10:\n    b = 3\n    print(b)'",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n\n    x = 0\n    if x > 10:\n        b = 3\n    print(b)\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n\n    x = 0\n    if x > 10:\n        b = 3\n        print(b)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnboundLocalVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: 'import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str' As a fix, place the field with the default value after the fields without default values: 'import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"'",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        last: str = \"\"\n        middle: str\n\nAs a fix, place the field with the default value after the fields without default values:\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        middle: str\n        last: str = \"\"\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNamedTuple",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: 'def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance' When the quick-fix is applied, the code changes to: 'def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance'",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n\n    def calc(self, balance=0):\n        'param: balance'\n        self.balance = balance\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def calc(self, balance=0):\n        \"\"\"param: balance\"\"\"\n        self.balance = balance\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PySingleQuotedDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyUnusedLocal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: 'class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum' A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n\n    class Sum:\n        def __init__(self, a, b):\n            self.a = a\n            self.b = b\n            self.sum = a + b\n            return self.sum\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyReturnFromInit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: 'def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass' As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n\n    def innocent(f):\n        return f\n\n\n    class A:\n        @innocent  # Decorator will not receive a callable it may expect\n        @classmethod\n        def f2(cls):\n            pass\n\n        @innocent  # Decorator will not receive a callable it may expect\n        @staticmethod\n        def f1():\n            pass\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyNestedDecorators",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring 'def demo(a):\n    c = a ** 2' Example of an empty docstring 'def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2' When the quick-fix is applied, the code fragments change to: 'def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2' You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n\n    def demo(a):\n        c = a ** 2\n\n**Example of an empty docstring**\n\n\n    def demo(a):\n        \"\"\"\n        \"\"\"\n        c = a ** 2\n\nWhen the quick-fix is applied, the code fragments change to:\n\n\n    def demo(a):\n        \"\"\"\n\n        :param a:\n        \"\"\"\n        c = a ** 2\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMissingOrEmptyDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: 'from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)'",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n\n    from typing import overload\n\n\n    @overload\n    def foo(p1, p2): # Overload signature is not compatible with the implementation\n        pass\n\n\n    @overload\n    def foo(p1): # Overload signature is not compatible with the implementation\n        pass\n\n\n    def foo(p1, p2, p3):\n        print(p1, p2, p3)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOverloads",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: 'class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")' In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: 'class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")'",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n\n    class mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n\n    class Mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPep8Naming",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: 'dic = {\"a\": [1, 2], \"a\": [3, 4]}'",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n\n    dic = {\"a\": [1, 2], \"a\": [3, 4]}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDictDuplicateKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: 'try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass' The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: 'try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass'",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n\n    try:\n        call()\n    except ValueError:\n        pass\n    except UnicodeError:\n        pass\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n\n    try:\n        call()\n    except UnicodeError:\n        pass\n    except ValueError:\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyExceptClausesOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: 'import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str'",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n\n    import dataclasses\n\n\n    @dataclasses.dataclass\n    class FullName:\n        first: str\n        middle: str = \"\"\n        last: str\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDataclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyprojectInspection",
                "shortDescription": {
                  "text": "Depencencies in pyproject.toml"
                },
                "fullDescription": {
                  "text": "Reports unsatisfied dependencies, declared [project.dependencies] table in pyproject.toml. Shows a quick-fix to install missing packages.",
                  "markdown": "Reports unsatisfied dependencies, declared \\[project.dependencies\\] table in pyproject.toml.\n\n\nShows a quick-fix to install missing packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyprojectInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: 'class A:\n    pass' With quick-fixes provided by the IDE, this code fragment changes to: 'class A(object):\n    def __init__(self):\n        pass'",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n\n    class A:\n        pass\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n\n    class A(object):\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyClassicStyleClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: 'def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()' As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n**Example:**\n\n\n    def just_print():\n        print(\"Hello!\")\n\n\n    action = just_print()\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyNoneFunctionAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. 'class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass' A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n\n    class C:\n        @property\n        def abc(self):  # Getter should return or yield something\n            pass\n\n        @abc.setter\n        def foo(self, value):  # Names of function and decorator don't match\n            pass\n\n        @abc.setter\n        def abc(self, v1, v2):  # Setter signature should be (self, value)\n            pass\n\n        @abc.deleter\n        def abc(self, v1):  # Delete signature should be (self)\n            pass\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPropertyDefinition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function. 'def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass' The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: 'def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass'",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n\n        def add(a, c):\n        \"\"\"\n        @param a:\n        @param b:\n        @return:\n        \"\"\"\n        pass\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n\n    def mult(a, c):\n        \"\"\"\n        @return:\n        \"\"\"\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyIncorrectDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: 'l = [1]\nl.append(2)' When the quick-fix is applied, the code changes to: 'l = [1, 2]'",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n\n    l = [1]\n    l.append(2)\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    l = [1, 2]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyListCreation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 0,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigDeprecatedDescriptor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigNumerousWildcards",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigWildcardRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigPartialOverride",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptySection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigHeaderUniqueness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowingOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigListAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowedOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptyHeader",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigVerifyByCore",
                "shortDescription": {
                  "text": "Invalid .editorconfig file"
                },
                "fullDescription": {
                  "text": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied.",
                  "markdown": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigVerifyByCore",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigMissingRequiredDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassLetterRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigKeyCorrectness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'.",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternEnumerationRedundancy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigSpaceInHeader",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigOptionRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigReferenceCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnusedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPairAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigNoMatchingFiles",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnexpectedComma",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 1,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ShellCheck",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 2,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlDuplicatedId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JsonSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateCharacterInClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaRefReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownBooleanAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlInvalidId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnboundNsPrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RequiredAttributes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLineSeparators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReassignedToPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n  private boolean CONST = true;\n  void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSuppression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnusedNamespaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantClassElement",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpSimplifiable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlWrongRootElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpEmptyAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckValidXmlInScriptTagBody",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection: Option \"Report syntax errors\": report parser-related issues. Option \"Report issues from language-specific annotators\": report issues found by annotators configured for the relevant language. See Custom Language Support: Annotators for details. Option \"Report other highlighting problems\": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See Custom Language Support: Highlighting for details.",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Annotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSuspiciousBackref",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlPathReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSingleCharAlternation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnnecessaryNonCapturingGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TodoComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckTagEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Json5StandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 14,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlMissingClosingTag",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDeprecatedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantNestedCharacterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomRegExpInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IncorrectFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlWrongAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDefaultAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpOctalEscape",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlExtraClosingTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAnchorTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedDefine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 14,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaCompliance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnexpectedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyDirectory",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpAnonymousGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckDtdRefs",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpellCheckingInspection",
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 15,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckXmlFileWithXercesValidator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAsciiCharacters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 16,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved references in XML.",
                  "markdown": "Reports an unresolved references in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpEscapedMetaCharacter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LossyEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 16,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRepeatedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 6,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example: '# Output directories\n    /out/\n    /target/\n    /out/'",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoreFileDuplicateEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 19,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JsonStandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 5,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckEmptyScriptTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 9,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLRecursiveAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLIncompatibleTypes",
                "shortDescription": {
                  "text": "Suspicious type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions. Example: 'myElements:\n  - value1\n  - value2\n  - false # <- reported, because it is a boolean value, while other values are strings'",
                  "markdown": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLIncompatibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLDuplicatedKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLUnusedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLUnresolvedAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 4,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicatePropertyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UseEllipsisInPropertyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AlphaUnsortedPropertiesFile",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace.",
                  "markdown": "Reports properties whose keys or values end with a whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TrailingSpacesInProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in.",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "WrongPropertyKeyValueDelimiter",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 7,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.markdown",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "MarkdownOutdatedTableOfContents",
                "shortDescription": {
                  "text": "Outdated table of contents section"
                },
                "fullDescription": {
                  "text": "Checks if a particular table of contents section corresponds to the actual structure of the document.",
                  "markdown": "Checks if a particular table of contents section corresponds to the actual structure of the document."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownOutdatedTableOfContents",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownNoTableBorders",
                "shortDescription": {
                  "text": "Table doesn't have side borders"
                },
                "fullDescription": {
                  "text": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.",
                  "markdown": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownNoTableBorders",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedLinkLabel",
                "shortDescription": {
                  "text": "Unresolved link label"
                },
                "fullDescription": {
                  "text": "Reports unresolved link labels in Markdown files.",
                  "markdown": "Reports unresolved link labels in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedLinkLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedFileReference",
                "shortDescription": {
                  "text": "Unresolved file references"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in Markdown files.",
                  "markdown": "Reports unresolved file references in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedFileReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectTableFormatting",
                "shortDescription": {
                  "text": "Incorrect table formatting"
                },
                "fullDescription": {
                  "text": "Checks if table is correctly formatted.",
                  "markdown": "Checks if table is correctly formatted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectTableFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectlyNumberedListItem",
                "shortDescription": {
                  "text": "Incorrectly numbered list item"
                },
                "fullDescription": {
                  "text": "Ordered list items are expected to have straight numeration starting from 1. The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an '<ol>' element for such list, that will number items continuously from 1.",
                  "markdown": "Ordered list items are expected to have straight numeration starting from 1.\n\nThe motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an `<ol>` element for such list, that will number items continuously from 1."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectlyNumberedListItem",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownLinkDestinationWithSpaces",
                "shortDescription": {
                  "text": "Links should not contain spaces"
                },
                "fullDescription": {
                  "text": "To ensure consistency between different tools, file links should not contain spaces. Example: '[Some file link](some file.md)' A quick-fix replaces spaces with their url-encoded equivalent: '[Some file link](some%20file.md)'",
                  "markdown": "To ensure consistency between different tools, file links should not contain spaces.\n\n**Example:**\n\n\n      [Some file link](some file.md)\n\nA quick-fix replaces spaces with their url-encoded equivalent:\n\n\n      [Some file link](some%20file.md)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownLinkDestinationWithSpaces",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedHeaderReference",
                "shortDescription": {
                  "text": "Unresolved header reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved header references in Markdown files.",
                  "markdown": "Reports unresolved header references in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedHeaderReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 8,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "QodanaSanity",
                "shortDescription": {
                  "text": "Sanity"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc...",
                  "markdown": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc..."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "QodanaSanity",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Qodana",
                      "index": 12,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example: '@Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist'",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectedReferences",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 10,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.security.package-checker",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "PyVulnerableApiCodeInspection",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Vulnerability data provided by Checkmarx (c).",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyVulnerableApiCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python/Security",
                      "index": 13,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VulnerableLibrariesLocal",
                "shortDescription": {
                  "text": "Vulnerable declared dependency"
                },
                "fullDescription": {
                  "text": "Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project. A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. The quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability. Vulnerability data provided by Checkmarx (c).",
                  "markdown": "Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableLibrariesLocal",
                    "cweIds": [
                      1395
                    ],
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 18,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LanguageDetectionInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 15,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar.",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieInspection",
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 15,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.toml.lang",
            "version": "241.14494.241",
            "rules": [
              {
                "id": "TomlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in TOML files.",
                  "markdown": "Reports unresolved references in TOML files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TomlUnresolvedReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "TOML",
                      "index": 17,
                      "toolComponent": {
                        "name": "PC"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "startTimeUtc": "2024-04-30T02:07:13.8481082Z",
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "properties": {
            "repoUrl": "",
            "vcsType": "Git"
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument",
            "markdown": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 77,
                  "charOffset": 2366,
                  "charLength": 7,
                  "snippet": {
                    "text": "options"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2252,
                  "charLength": 124,
                  "snippet": {
                    "text": "            options['count'] = count\n\n        return self.request(\"/api/v2/public/get_last_trades_by_instrument\", options)\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "446de37b5da1cae7",
            "equalIndicator/v1": "01cf9a2f5834c02d4c5f9937e37e879cc161b38ecbfe8f4cc7ba2d903bd15f61"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument",
            "markdown": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 67,
                  "charOffset": 2485,
                  "charLength": 43,
                  "snippet": {
                    "text": "{\"currency\": currency, \"extended\" : 'true'}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2376,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    def getsummary(self, currency=\"BTC\"):\n        return self.request(\"/api/v2/public/get_account_summary\", {\"currency\": currency, \"extended\" : 'true'})\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b83c88745c887eb5",
            "equalIndicator/v1": "2c10a20bc3432520a2ce497209a71afe91d1196f2b39c46a700dde9fe6ad7e7a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument",
            "markdown": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 57,
                  "charOffset": 2625,
                  "charLength": 22,
                  "snippet": {
                    "text": "{\"currency\": currency}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2531,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n    def index(self, currency=\"BTC\"):\n        return self.request(\"/api/v2/public/get_index\", {\"currency\": currency})\n\n    # put a hidden option in"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ec7f09d3145afc9f",
            "equalIndicator/v1": "9a85cfd2e51a0f57dc13cd86a37e799ef50f41e8f56c705bea718b415d4cdcf5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyArgumentListInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected argument",
            "markdown": "Unexpected argument"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 61,
                  "charOffset": 2107,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2017,
                  "charLength": 95,
                  "snippet": {
                    "text": "    def getcurrencies(self):\n\n        return self.request(\"api/v2/public/get_currencies\", {})\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "77658dabae7256d1",
            "equalIndicator/v1": "ad8fe2390a7f27f24ace5fbaca155c8e2b33cbd4875b896bc89239e8327cdc6d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute APIThread defined outside __init__",
            "markdown": "Instance attribute APIThread defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 9,
                  "charOffset": 599,
                  "charLength": 14,
                  "snippet": {
                    "text": "self.APIThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 467,
                  "charLength": 229,
                  "snippet": {
                    "text": "    def start(self):\n        # parsing a delegate to the thread for this function and then say to start the thread later on\n        self.APIThread = Thread(target=self.deribitWebSocket.startSocket)\n        self.APIThread.start()\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1480a00cdfb2a977",
            "equalIndicator/v1": "4d1ba84257147f47a0fb6871b1f74977d44e9b6228238d73edaea17acd1ed3bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 13,
                  "charOffset": 313,
                  "charLength": 22,
                  "snippet": {
                    "text": "self._oldOrder != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 273,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n    def getOldOrder(self):\n        if (self._oldOrder != None):\n            temp = Order()\n            temp.setOrder(self._oldOrder)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "48046267cb962113",
            "equalIndicator/v1": "0b9bc3f82a7668ddaaf76c2b1f7d6e18365fde7a76fa77addb3461bc52e73d71"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "charOffset": 3192,
                  "charLength": 29,
                  "snippet": {
                    "text": "currentPositionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3086,
                  "charLength": 243,
                  "snippet": {
                    "text": "        '''\n        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0229ad98c39777ca",
            "equalIndicator/v1": "16ea63f3b841b300223df38e01ae14f649505c06367a84b08996e9220b00311e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "charOffset": 784,
                  "charLength": 22,
                  "snippet": {
                    "text": "positionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 719,
                  "charLength": 285,
                  "snippet": {
                    "text": "\n        #  stop exit if order is below average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n            # shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5cdb4818aa93e14c",
            "equalIndicator/v1": "36b705962faddcb63f0d16a2d9cbf822bf6552b0cfc9e22f1ea4873e3fe1e63c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 16,
                  "charOffset": 1110,
                  "charLength": 12,
                  "snippet": {
                    "text": "data == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 985,
                  "charLength": 232,
                  "snippet": {
                    "text": "\n            # problem with data access and waiting a while and resetting the connection would be a good idea\n            if data == None: continue\n\n            positionStatus = self.positionManagementObject.findOurCurrentPosition()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "94a312d56d791eeb",
            "equalIndicator/v1": "46ab4906d24e16e6e4b5ed2bc4dfc4edb72381db95cf86ad8b1985d31b412d42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 30,
                  "charOffset": 3299,
                  "charLength": 29,
                  "snippet": {
                    "text": "currentPositionStatus == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 3098,
                  "charLength": 260,
                  "snippet": {
                    "text": "        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None\n\n        mapOfExitSignals = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8d7f84b427c1bf55",
            "equalIndicator/v1": "48dbe1d713f8859ab6eeb0561245b3232a1b4f041cf209e95893af2511ba3149"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "charOffset": 1607,
                  "charLength": 17,
                  "snippet": {
                    "text": "mapOfData != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1568,
                  "charLength": 255,
                  "snippet": {
                    "text": "        bestPrices = None\n\n        if (mapOfData != None) and\\\n                \"params\" in mapOfData and \"data\" in mapOfData[\"params\"] \\\n            and (\"best_bid_price\" in mapOfData['params']['data'] and \"best_ask_price\" in mapOfData['params']['data']):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0b472abd7ea6777",
            "equalIndicator/v1": "5d6a2d191f4954a0e4ee8137b50f42242965dc751d7a193b106a9440fecc6c87"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 12,
                  "charOffset": 3434,
                  "charLength": 29,
                  "snippet": {
                    "text": "currentPositionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3386,
                  "charLength": 186,
                  "snippet": {
                    "text": "            \"sell\" : False\n        }\n        if currentPositionStatus != None:\n            spread = data[\"ask\"] - data[\"bid\"]\n            if currentPositionStatus[\"direction\"] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f853fc756caa9160",
            "equalIndicator/v1": "5fe3039b01242ed3495286de1612a503ac3d9cdc6e432c587ae1e436611b729a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 12,
                  "charOffset": 1425,
                  "charLength": 23,
                  "snippet": {
                    "text": "self._lastOrder == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1386,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n    def isOrderNone(self):\n        if self._lastOrder == None:\n            return True\n        return False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "38147145684ea155",
            "equalIndicator/v1": "60dca9761c31f4f58d52efc75adc8164330f999d97252df519d74c8af746e0d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "charOffset": 1778,
                  "charLength": 22,
                  "snippet": {
                    "text": "positionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1703,
                  "charLength": 167,
                  "snippet": {
                    "text": "        '''\n        # exit as soon as you surpass average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ba29f3355e297bf2",
            "equalIndicator/v1": "8110b77b68963698a568f8b347a9974302ab558825dd46026e8180dd666e5305"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 12,
                  "charOffset": 2324,
                  "charLength": 22,
                  "snippet": {
                    "text": "positionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2283,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n        # exit order quickly\n        if positionStatus != None:\n\n            enteredPrice = Decimal(positionStatus['average_price'])"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8377f761beaea62",
            "equalIndicator/v1": "90ed33680d4aadaa12fa22fe53a85af2a5d1f1edb6e52db3b3ebd22ac5870f72"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 12,
                  "charOffset": 10834,
                  "charLength": 13,
                  "snippet": {
                    "text": "order == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 10735,
                  "charLength": 168,
                  "snippet": {
                    "text": "    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:\n            return\n        customOrder.setOrder(order)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8f632c925f0504fc",
            "equalIndicator/v1": "afeef8255f155e18156ec55e716b5b37a6252766ce5cedb5543f9ccfb9bc730b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "charOffset": 1235,
                  "charLength": 22,
                  "snippet": {
                    "text": "positionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1134,
                  "charLength": 221,
                  "snippet": {
                    "text": "            positionStatus = self.positionManagementObject.findOurCurrentPosition()\n\n            if (positionStatus != None) and (\"error\" in positionStatus): continue\n\n            self.orderManagementObject.run(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0fc66097ace5fb5",
            "equalIndicator/v1": "bca763b249c406e187e86682b47c148052fcdbc27a22f82a941fd2c5ee3f9b62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 16,
                  "charOffset": 595,
                  "charLength": 23,
                  "snippet": {
                    "text": "currentPosition == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 398,
                  "charLength": 294,
                  "snippet": {
                    "text": "            #result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")\n            currentPosition = self._clientDERIBIT.position(self.indiceName)\n            if currentPosition == None:\n                return None\n            if currentPosition[\"size\"] == 0:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "230b3203797da63a",
            "equalIndicator/v1": "cbf1b7e7f45017ada6912bd99c32b77edfd5dad46591ae10440fad81a50b4f29"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 17,
                  "charOffset": 2292,
                  "charLength": 29,
                  "snippet": {
                    "text": "currentPositionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2152,
                  "charLength": 281,
                  "snippet": {
                    "text": "            # here check our position\n            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "38db7322904d1dbe",
            "equalIndicator/v1": "d798de92064c1b182818d03236a2db069c04e1ef4ca5c8b3a637120513654e26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 34,
                  "charOffset": 2403,
                  "charLength": 29,
                  "snippet": {
                    "text": "currentPositionStatus == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2190,
                  "charLength": 287,
                  "snippet": {
                    "text": "            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None\n\n            # exit order has been completed"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eb852840f2a26baa",
            "equalIndicator/v1": "e6b80e6d1b846365381920359f02c8ef7e24bfbc2f91e16443e9a16241c864cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 28,
                  "charOffset": 2650,
                  "charLength": 18,
                  "snippet": {
                    "text": "localOrder == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2528,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n                        # some order may come back as a None due to the connection timing out\n                        if localOrder == None or localOrder.isOrderNone():\n                            continue\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ba75955888020686",
            "equalIndicator/v1": "f171707672149ebc0e264b297e5321a637b4d4f90d3da0fdc12384cbb7d2cec9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 12,
                  "charOffset": 3904,
                  "charLength": 22,
                  "snippet": {
                    "text": "positionStatus != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3810,
                  "charLength": 197,
                  "snippet": {
                    "text": "        # no orders present\n        if len(listOfPresentOrders) == 0: return False\n        if positionStatus != None:\n            # going short\n            if positionStatus['direction'] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7c847bad66f19ef2",
            "equalIndicator/v1": "f37e359fef2ee92ca47c0c8a989a7a9279469790ec0f8552d3a077cd1fb5656d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 12,
                  "charOffset": 1008,
                  "charLength": 16,
                  "snippet": {
                    "text": "newQuote == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 924,
                  "charLength": 193,
                  "snippet": {
                    "text": "        newQuote = self.sortData(self.deribitWebSocket.getListOfData())\n\n        if newQuote == None: return None\n\n        # newQuoteString = str(newQuote[\"bid\"]) +  \"-\" +  str(newQuote[\"ask\"])"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "56a0a37f9e45cee0",
            "equalIndicator/v1": "fbfe402964c36560f53969b88bae005193a4e9d50c4b54139d3e5f99034320b9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyDictCreationInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This dictionary creation could be rewritten as a dictionary literal",
            "markdown": "This dictionary creation could be rewritten as a dictionary literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 9,
                  "charOffset": 5271,
                  "charLength": 8,
                  "snippet": {
                    "text": "msg = {}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 5221,
                  "charLength": 139,
                  "snippet": {
                    "text": "            params[\"order_id\"] = orderId\n\n        msg = {}\n        msg[\"method\"] = \"private/get_order_state\"\n        msg[\"params\"] = params"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9c0c97acd029a14d",
            "equalIndicator/v1": "cbd9495a513d763d66b96352cb856bb85bfb63cc4ad143d0779ed3f081f8c13c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyDictCreationInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This dictionary creation could be rewritten as a dictionary literal",
            "markdown": "This dictionary creation could be rewritten as a dictionary literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 9,
                  "charOffset": 4482,
                  "charLength": 8,
                  "snippet": {
                    "text": "msg = {}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 4463,
                  "charLength": 102,
                  "snippet": {
                    "text": "        }\n\n        msg = {}\n        msg[\"method\"] = \"private/cancelall\"\n        msg[\"params\"] = params"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8083534aadb1734e",
            "equalIndicator/v1": "dcfbd4361e6fdf70c75c79652502ac047dc349f59823f29dd1d33b3f86e28470"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyDictCreationInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "This dictionary creation could be rewritten as a dictionary literal",
            "markdown": "This dictionary creation could be rewritten as a dictionary literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 9,
                  "charOffset": 4747,
                  "charLength": 8,
                  "snippet": {
                    "text": "msg = {}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4687,
                  "charLength": 163,
                  "snippet": {
                    "text": "            params[\"instrument_name\"] = instrument\n\n        msg = {}\n        msg[\"method\"] = \"private/get_open_orders_by_instrument\"\n        msg[\"params\"] = params"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b0a06c7249818764",
            "equalIndicator/v1": "f0f32a7dd93d2e9d3a2c1184be90ebe8f1cf008bba1be5572203f409fa40028d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'generateSignal' may be 'static'",
            "markdown": "Method `generateSignal` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 9,
                  "charOffset": 4729,
                  "charLength": 14,
                  "snippet": {
                    "text": "generateSignal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    # this means we are always going to enter orders, as the signal is always true\n    def generateSignal(self, mapOfDataPrice):\n\n        buySignal = True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f798f675bf2464b4",
            "equalIndicator/v1": "1746c67d29f1eebb7784397409726c1a7a50b946a6dcdc9994f6adc7c0b1846c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'exceptionHandler' may be 'static'",
            "markdown": "Method `exceptionHandler` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 3599,
                  "charLength": 16,
                  "snippet": {
                    "text": "exceptionHandler"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3507,
                  "charLength": 205,
                  "snippet": {
                    "text": "                self.exceptionHandler(e, \" getOpenOrders function throw an error\")\n\n    def exceptionHandler(self, e, task):\n        print(str(e), \" error occured when doing \" + task)\n        time.sleep(5)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c3610e07b349a305",
            "equalIndicator/v1": "4232fbf25ffa8f8be5cd9beeb3588413c167707d4e03ad975734bd29ee0308ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'createACustomOrderObject' may be 'static'",
            "markdown": "Method `createACustomOrderObject` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 9,
                  "charOffset": 10743,
                  "charLength": 24,
                  "snippet": {
                    "text": "createACustomOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 10733,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\n    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5c8338457ef2ed24",
            "equalIndicator/v1": "caefff4ff29df5f74b535a0cdfba252e415994fc94a8a0b2db2e86cf0d45fa82"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'authenticate' may be 'static'",
            "markdown": "Method `authenticate` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 9,
                  "charOffset": 98,
                  "charLength": 12,
                  "snippet": {
                    "text": "authenticate"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "charOffset": 88,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n\n    def authenticate(self):\n        # testing version\n        url = \"wss://test.deribit.com/ws/api/v2\""
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "421d3c2bc47a44fb",
            "equalIndicator/v1": "d158461e95d18349ebffd3471027c3e4e4785aaf570e9aa9f7467dc368483166"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'findItemByLoopingThroughPresentOrders' may be 'static'",
            "markdown": "Method `findItemByLoopingThroughPresentOrders` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "charOffset": 4445,
                  "charLength": 37,
                  "snippet": {
                    "text": "findItemByLoopingThroughPresentOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 4303,
                  "charLength": 284,
                  "snippet": {
                    "text": "\n    # finds if we still have orders on the same side as the position as it could fill later on increase/decreasing our average price\n    def findItemByLoopingThroughPresentOrders(self, listOfOrders, side):\n        for order in listOfOrders:\n            if order[\"direction\"] == side:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "74decfd5ad91033d",
            "equalIndicator/v1": "d494f7d9f087dbb1ef06bada08df51693a275891515ccc89036304d413e62fd3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'sortData' may be 'static'",
            "markdown": "Method `sortData` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "charOffset": 1540,
                  "charLength": 8,
                  "snippet": {
                    "text": "sortData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1511,
                  "charLength": 82,
                  "snippet": {
                    "text": "        return None\n\n    def sortData(self, mapOfData):\n\n        bestPrices = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "be8c155bf28035e1",
            "equalIndicator/v1": "d628dd0fd49f10738d84994cdb2377b0773d09c72698bd5bb43926ac9b15492f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'errorFound' may be 'static'",
            "markdown": "Method `errorFound` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1402,
                  "charLength": 10,
                  "snippet": {
                    "text": "errorFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1392,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n\n    def errorFound(self,e):\n        print(str(e) + \" -+waiting for data so sleeping for 15s\")\n        time.sleep(15)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "01955fbe46789957",
            "equalIndicator/v1": "e55b4028715f0bea4ff5dd063f10d14b2f9717945e81d4c59e10282c816cdef5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 5,
                  "charOffset": 4606,
                  "charLength": 36,
                  "snippet": {
                    "text": "def getopenorders(self, instrument):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 4600,
                  "charLength": 63,
                  "snippet": {
                    "text": "\n\n    def getopenorders(self, instrument):\n        params = {}\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c1fb86a879490581",
            "equalIndicator/v1": "0236cd487585e496bc06a2b58cf86b31dfdbea7072af41fc008e22eb0db60c29"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 104,
                  "charOffset": 361,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 193,
                  "charLength": 231,
                  "snippet": {
                    "text": "        # real\n        # url = \"wss://www.deribit.com/ws/api/v2\"\n        deribitClient = RestClient(key=\"1H37RfiB\", secret=\"uwzosu7y179KMaMw1W7wbI9I8DxfYjSq0mfLnbbrPF8\",url=url)\n\n        return {\"deribit\": deribitClient, \"url\":url}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "466a3dd1cc4a0acb",
            "equalIndicator/v1": "04277830ee731c41c0ca8de6e36f13f88e56b9704d37bed648a9b9ef573a0455"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E265 block comment should start with '# '",
            "markdown": "PEP 8: E265 block comment should start with '# '"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 13,
                  "charOffset": 410,
                  "charLength": 93,
                  "snippet": {
                    "text": "#result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 293,
                  "charLength": 326,
                  "snippet": {
                    "text": "        try:\n            #result = self._clientDERIBIT.getorderbook(instrument=self.indiceName, depth=5)\n            #result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")\n            currentPosition = self._clientDERIBIT.position(self.indiceName)\n            if currentPosition == None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "153f2781cde50ada",
            "equalIndicator/v1": "05f04e724721e0bf12afb4d403e53486c1c6ffe7bfc5e8819e50d8bcdc6d4bb6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (145 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (145 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 119,
                  "charOffset": 9103,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 8954,
                  "charLength": 331,
                  "snippet": {
                    "text": "\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size=newSize,price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # newPrice -= self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "69bdeaf7d68da69b",
            "equalIndicator/v1": "067661dfdc3332c2b240c04cf2693b51fe1dae5b5fdd6d8eda465cf99f316a14"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 19,
                  "charOffset": 510,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 431,
                  "charLength": 151,
                  "snippet": {
                    "text": "        self.auth_creds = {\n              \"jsonrpc\" : \"2.0\",\n              \"id\" : 0,\n              \"method\" : \"public/auth\",\n              \"params\" : {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9e9045f2342caa0f",
            "equalIndicator/v1": "0a73562f309b51aef9c1ad4ad9cd40563b9803e8f08c20cafd6a1ca363d1a2b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 34,
                  "charOffset": 3456,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3386,
                  "charLength": 186,
                  "snippet": {
                    "text": "            \"sell\" : False\n        }\n        if currentPositionStatus != None:\n            spread = data[\"ask\"] - data[\"bid\"]\n            if currentPositionStatus[\"direction\"] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6c28fe5d1456c7ec",
            "equalIndicator/v1": "0bcdcc335d676ddf05670b44d94da2e176c79ed3398813183e08e3dbbdca9dea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 0",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 34,
                  "charLength": 11,
                  "snippet": {
                    "text": "def main():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69,
                  "snippet": {
                    "text": "from controller import Controller\ndef main():\n    Controller().run()\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f14f3620005b7019",
            "equalIndicator/v1": "0e7819bc21f1e7e61c038d3789bbbbbc85e7cd497157b22c2119cd285b4a5ed3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 32,
                  "charOffset": 1250,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1134,
                  "charLength": 221,
                  "snippet": {
                    "text": "            positionStatus = self.positionManagementObject.findOurCurrentPosition()\n\n            if (positionStatus != None) and (\"error\" in positionStatus): continue\n\n            self.orderManagementObject.run(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a7a5193aea4fa2c",
            "equalIndicator/v1": "1241f553c1b706478999b6e8c153eeb9c81bc5238280b4746d64bdd25e07add5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 3285,
                  "charLength": 36,
                  "snippet": {
                    "text": "def getOpenOrders(self, indiceName):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3279,
                  "charLength": 80,
                  "snippet": {
                    "text": "\n\n    def getOpenOrders(self, indiceName):\n        while(True):\n            try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4547bf1a1fa160dd",
            "equalIndicator/v1": "15eeb77534ad08dc95488cc9a7248e6ca26d042c278f8f6ba4e1b396db573332"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 101,
                  "charLength": 21,
                  "snippet": {
                    "text": "class Deribitv2API():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 88,
                  "charLength": 59,
                  "snippet": {
                    "text": "import time\n\nclass Deribitv2API():\n\n    def __init__(self):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "baee93d15c4ab4b6",
            "equalIndicator/v1": "168a26ffd54e91925bf7cac6d52544b4770e6d8dba2bbc79ae73352f49de3cc9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 5,
                  "charOffset": 5145,
                  "charLength": 35,
                  "snippet": {
                    "text": "def orderstate(self, orderId=None):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 5139,
                  "charLength": 81,
                  "snippet": {
                    "text": "\n\n    def orderstate(self, orderId=None):\n        params = {}\n        if orderId:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "32c1a9aaeca4418e",
            "equalIndicator/v1": "1949e8690ec28123bbc566187f83069aef82a9a9b41e9759ee1b993217c9dc8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 39,
                  "charOffset": 2114,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2050,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eac6a4cb004e57c1",
            "equalIndicator/v1": "1d5580682a05955a9c722ca882000fcaa4c97d7a165fac2de472495e84a5f090"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 72,
                  "charOffset": 1290,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1134,
                  "charLength": 221,
                  "snippet": {
                    "text": "            positionStatus = self.positionManagementObject.findOurCurrentPosition()\n\n            if (positionStatus != None) and (\"error\" in positionStatus): continue\n\n            self.orderManagementObject.run(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "49cf76b48f9fb743",
            "equalIndicator/v1": "1eababd15543f4fc8072441ebebc2846f9f17a0fa5e4b0c71ebe4cec8530bd45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ','",
            "markdown": "PEP 8: E203 whitespace before ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 116,
                  "charOffset": 8233,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 8084,
                  "charLength": 349,
                  "snippet": {
                    "text": "\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size= newSize , price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "26d882641463bad5",
            "equalIndicator/v1": "1f18749b552df864c7961a3aebc1fd315b6f705c303a6c3fd71c7e2eebccfd3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 23,
                  "charOffset": 578,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 492,
                  "charLength": 183,
                  "snippet": {
                    "text": "              \"id\" : 0,\n              \"method\" : \"public/auth\",\n              \"params\" : {\n                \"grant_type\" : \"client_credentials\",\n                \"client_id\" : self.key,"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5c12724e0c473e45",
            "equalIndicator/v1": "206fbdbbe980ed7603130467bc25ff065fe0f6a48b926061fd2c5e62fdcb6ec7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E275 missing whitespace after keyword",
            "markdown": "PEP 8: E275 missing whitespace after keyword"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 52,
                  "charOffset": 4772,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4675,
                  "charLength": 214,
                  "snippet": {
                    "text": "\n        # remove the previous list of orders\n        if len(self.listOfMapOfOrdersExit) > 2: del(self.listOfMapOfOrdersExit[0])\n        if len(self.listOfMapOfOrdersEnter) > 2: del(self.listOfMapOfOrdersEnter[0])\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ec61a325efa59f26",
            "equalIndicator/v1": "20bc4c058eb9e1cb1d3cb0087608de82f2223d625b3ab2f4166284f981b9d33f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (128 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (128 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 13,
                  "charOffset": 888,
                  "charLength": 116,
                  "snippet": {
                    "text": "# shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 773,
                  "charLength": 342,
                  "snippet": {
                    "text": "        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n            # shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low\n            if positionStatus['direction'] == \"sell\":\n                if meanPriceFromQuotes > (enteredPrice):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bf175fca27addbcb",
            "equalIndicator/v1": "24f20db0ce8bbd3c6a45de627726066c1fe2f5ca18ab7f9ec63cdb5542ea5a89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 66,
                  "charOffset": 1535,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1380,
                  "charLength": 244,
                  "snippet": {
                    "text": "    def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):\n\n        if not isinstance(orderManagementObject, OrderManagement): return\n        if not isinstance(positionManagementObject, PositionManagement): return\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1c51019757a159f0",
            "equalIndicator/v1": "27131866d867aa4f701305a99b5735e32f3e4980dba3ca506e6ba10ffc23c4cd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 56,
                  "charOffset": 2425,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2190,
                  "charLength": 287,
                  "snippet": {
                    "text": "            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None\n\n            # exit order has been completed"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f155559110e9183c",
            "equalIndicator/v1": "28cb19dfd62514647b98ddae36a77bd7c1621012ff47176353a075ec9d0e6541"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (133 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (133 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 119,
                  "charOffset": 8236,
                  "charLength": 5,
                  "snippet": {
                    "text": "price"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 8084,
                  "charLength": 349,
                  "snippet": {
                    "text": "\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size= newSize , price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3c5195075c521dde",
            "equalIndicator/v1": "2ae43fd97040c6b31ad63633ed1509b86073a19ab7c05df9ee6805286e4ad723"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 65,
                  "charLength": 24,
                  "snippet": {
                    "text": "class OrderManagement():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 36,
                  "charLength": 112,
                  "snippet": {
                    "text": "from decimal import Decimal\n\nclass OrderManagement():\n    def __init__(self):\n        self._clientDERIBIT = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bc0b92db13424339",
            "equalIndicator/v1": "2c83a7576524bd03b3c64551dda45a7d56ea1d3844f6d75856aeafbc66f3844b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 29,
                  "charLength": 14,
                  "snippet": {
                    "text": "class Order():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 98,
                  "snippet": {
                    "text": "from decimal import Decimal\n\nclass Order():\n    def __init__(self):\n        self._lastOrder = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e43347e1834bbf0f",
            "equalIndicator/v1": "2cabcc516d0b729c6aa53daddadb3f271d8a9c11b2a57bf67d9080ff02a6bcab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E127 continuation line over-indented for visual indent",
            "markdown": "PEP 8: E127 continuation line over-indented for visual indent"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 13,
                  "charOffset": 1717,
                  "charLength": 3,
                  "snippet": {
                    "text": "and"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1595,
                  "charLength": 318,
                  "snippet": {
                    "text": "        if (mapOfData != None) and\\\n                \"params\" in mapOfData and \"data\" in mapOfData[\"params\"] \\\n            and (\"best_bid_price\" in mapOfData['params']['data'] and \"best_ask_price\" in mapOfData['params']['data']):\n\n            bestPrices = {\"bid\": Decimal(mapOfData['params']['data']['best_bid_price']),"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20a95f4044b3f62e",
            "equalIndicator/v1": "2f61c209eaa315480b93217d27bf16db87afecd1c0fe882beb1cae78e31554c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
            "markdown": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 70,
                  "charLength": 26,
                  "snippet": {
                    "text": "if __name__ == \"__main__\":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 46,
                  "charLength": 61,
                  "snippet": {
                    "text": "    Controller().run()\n\nif __name__ == \"__main__\":\n    main()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cb18a559a9e5c53f",
            "equalIndicator/v1": "3076bd89ce919d68fa9ebb6160ac92f9aa93a7d32be8310520cf6a7d0354509b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1384,
                  "charLength": 84,
                  "snippet": {
                    "text": "def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 165,
                  "snippet": {
                    "text": "\n\n    def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):\n\n        if not isinstance(orderManagementObject, OrderManagement): return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0367d600d8422c95",
            "equalIndicator/v1": "3131d63e2ddd7a9a2bfd76f0added53eb75c9bcbdc346a9cdc77bc81ed967004"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 27,
                  "charOffset": 2339,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2283,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n        # exit order quickly\n        if positionStatus != None:\n\n            enteredPrice = Decimal(positionStatus['average_price'])"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f48f7c52a81bbaa",
            "equalIndicator/v1": "331c0665e412981e13e9d8725e13d2aed5b0e52d781be29015b7293582a36d04"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (156 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (156 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 121,
                  "charOffset": 5826,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 5480,
                  "charLength": 384,
                  "snippet": {
                    "text": "        intialStartSell = mapOfSignals[\"sell\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a sell signal and we are in a position and the position is a long and we have not made any orders to exit\n        exitPositionSell = mapOfExitSignals[\"sell\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"buy\" and (not self.exitingOrder)\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f9eaa97d80d0b51",
            "equalIndicator/v1": "3320db334f4f3ed562341015d3753cfa8ba1ea18ad31132a25530367f65ce22b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (123 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (123 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1243,
                  "charLength": 111,
                  "snippet": {
                    "text": "# long - if the price we entered is larger then what we want to exit with then stop - we want sell high buy low"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1116,
                  "charLength": 350,
                  "snippet": {
                    "text": "                    # print(\"price is too high turn signalToBuy to false\")\n                    signalToBuy = False\n            # long - if the price we entered is larger then what we want to exit with then stop - we want sell high buy low\n            elif positionStatus['direction'] == \"buy\":\n                if meanPriceFromQuotes < (enteredPrice):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6feea4dc6ba25a2e",
            "equalIndicator/v1": "3ed5749e7031c898863e0d820fd830fc074f79740b58fead4dc817dde99be070"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ','",
            "markdown": "PEP 8: E203 whitespace before ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 113,
                  "charOffset": 7656,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7db638e4e32d93ff",
            "equalIndicator/v1": "4245509a2c6945d46ce9ab78d16f7f3b5736fa9563815c7a54fd495ea59f9376"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 28,
                  "charOffset": 1024,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 924,
                  "charLength": 193,
                  "snippet": {
                    "text": "        newQuote = self.sortData(self.deribitWebSocket.getListOfData())\n\n        if newQuote == None: return None\n\n        # newQuoteString = str(newQuote[\"bid\"]) +  \"-\" +  str(newQuote[\"ask\"])"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0570bf7f81af996f",
            "equalIndicator/v1": "43925655be1fb9bb614061cff3b192f3fbf5e1fb2b746660230211023b083360"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 35,
                  "charOffset": 3214,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3086,
                  "charLength": 243,
                  "snippet": {
                    "text": "        '''\n        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d90b8f4991708268",
            "equalIndicator/v1": "48c04c3ccdbab52cce552727d4d971a04ad904cf85823b335b76f8c35d2be562"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (4)",
            "markdown": "PEP 8: E303 too many blank lines (4)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 5,
                  "charOffset": 8717,
                  "charLength": 70,
                  "snippet": {
                    "text": "def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 8711,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\n    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "54728be25a43e967",
            "equalIndicator/v1": "4940d3445d18020c1209ad5e78af10fa8522bf6fbfbf8ad5fee1f0fa922352c0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 5,
                  "charOffset": 4074,
                  "charLength": 26,
                  "snippet": {
                    "text": "def cancel(self, orderId):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4068,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\n    def cancel(self, orderId):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5ea3c8cbe0a74c82",
            "equalIndicator/v1": "4aa85f4393fc144f82f718a491b4e07c24c78fa7dc652f8ec9c8fae34a7eda5e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (136 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (136 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 114,
                  "charOffset": 6327,
                  "charLength": 22,
                  "snippet": {
                    "text": "listOfMapOfOrdersEnter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 6007,
                  "charLength": 382,
                  "snippet": {
                    "text": "            print(\"out of position entering both buy and sell orders\")\n            self.enterOrderScaling(side=\"buy\", size=self.fundingAmount, price=data[\"bid\"], listOfMapOrders=self.listOfMapOfOrdersEnter)\n            self.enterOrderScaling(side=\"sell\", size=self.fundingAmount, price=data[\"ask\"], listOfMapOrders=self.listOfMapOfOrdersEnter)\n            self.enteringOrder = True\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "840e33b8783c23f7",
            "equalIndicator/v1": "4aaf215c97767aa1964775bbaffe40ff898e9086f32cba8641e7c635397c2618"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 9,
                  "charOffset": 5587,
                  "charLength": 118,
                  "snippet": {
                    "text": "# if we find a sell signal and we are in a position and the position is a long and we have not made any orders to exit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 5375,
                  "charLength": 488,
                  "snippet": {
                    "text": "        # if we find a sell signal and we are not in a position and we have not made any orders to enter\n        intialStartSell = mapOfSignals[\"sell\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a sell signal and we are in a position and the position is a long and we have not made any orders to exit\n        exitPositionSell = mapOfExitSignals[\"sell\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"buy\" and (not self.exitingOrder)\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3e498f9d0842e923",
            "equalIndicator/v1": "4ac56e4fb665719621fe16a06ec218ce5469ae193a6d711843c75409df0795e0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 28,
                  "charOffset": 1441,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1386,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n    def isOrderNone(self):\n        if self._lastOrder == None:\n            return True\n        return False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d386cf756f4f03c0",
            "equalIndicator/v1": "4bd18218eac999ba2f237600fef417a9b9e1f1785e8a1844c81e0e111b3faee9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 27,
                  "charOffset": 1793,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1703,
                  "charLength": 167,
                  "snippet": {
                    "text": "        '''\n        # exit as soon as you surpass average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9ed2f638d82538dc",
            "equalIndicator/v1": "4c02273adf54abf719eaeb1f4ccb87003f8ddce1ac4f9200d16c8f4bd70bf219"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 28,
                  "charOffset": 663,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 556,
                  "charLength": 181,
                  "snippet": {
                    "text": "              \"params\" : {\n                \"grant_type\" : \"client_credentials\",\n                \"client_id\" : self.key,\n                \"client_secret\" : self.secret\n              }"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b3089dd8e8422fd8",
            "equalIndicator/v1": "4c661757d9c8ff3c3ca2c40fe2ecb0d4aef6487248b048ac4e99be67626980b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 48,
                  "charOffset": 4851,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4676,
                  "charLength": 317,
                  "snippet": {
                    "text": "        # remove the previous list of orders\n        if len(self.listOfMapOfOrdersExit) > 2: del(self.listOfMapOfOrdersExit[0])\n        if len(self.listOfMapOfOrdersEnter) > 2: del(self.listOfMapOfOrdersEnter[0])\n\n        # if we find a buy signal and we are not in a position and we have not made any orders to enter"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7ddba3ff7db019f4",
            "equalIndicator/v1": "4c91b7feed856f4c37872336bbbf98e44e78c7167ccc3c2bfe2fe719b0eb2d83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 1398,
                  "charLength": 23,
                  "snippet": {
                    "text": "def errorFound(self,e):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1392,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n\n    def errorFound(self,e):\n        print(str(e) + \" -+waiting for data so sleeping for 15s\")\n        time.sleep(15)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d8e4e5cff08d305",
            "equalIndicator/v1": "4d16b71840a6eecfdef696231f05f680963afb5a082ace5d9a723d009afa5dd7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 5,
                  "charOffset": 747,
                  "charLength": 18,
                  "snippet": {
                    "text": "def connect(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 741,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\n    def connect(self):\n        self.ws = create_connection(self.url)\n        self.ws.send(json.dumps(self.msg))"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fdcd739ab39d1c0b",
            "equalIndicator/v1": "5055eb569b83e9903c718986f445990c89f7df339eccb9cac14ecf41470d1f1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (135 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (135 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 121,
                  "charOffset": 2948,
                  "charLength": 1,
                  "snippet": {
                    "text": "."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2765,
                  "charLength": 268,
                  "snippet": {
                    "text": "        '''\n        # check if orders are present for entering\n        mapOfOutcomesEnter = self.orderPresent(listOfOrdersMaps=self.listOfMapOfOrdersEnter, switchIfOrderIsPresent=self.enteringOrder)\n        '''\n        Order checking and editing above the if statement"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "93975850fd84c6c6",
            "equalIndicator/v1": "5256f6680d865dded59f1c2aaa6e7dbf614d579ccf4c6697b11321f0a9c55d2a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 259,
                  "charLength": 17,
                  "snippet": {
                    "text": "class Controller:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 246,
                  "charLength": 99,
                  "snippet": {
                    "text": "import time\n\nclass Controller:\n    def __init__(self):\n        self.gatherDataObject = GatherData()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "83c58a662e6ae585",
            "equalIndicator/v1": "529f9c4047239df7939317ff3999561e143187805b4ee4835a1e2912cc84006f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 32,
                  "charOffset": 611,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 398,
                  "charLength": 294,
                  "snippet": {
                    "text": "            #result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")\n            currentPosition = self._clientDERIBIT.position(self.indiceName)\n            if currentPosition == None:\n                return None\n            if currentPosition[\"size\"] == 0:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3db69a9caef8e192",
            "equalIndicator/v1": "53928f64ea021e7877fef171aa1488f98ba6951dbc840d61526d294439fc2bb2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (4)",
            "markdown": "PEP 8: E303 too many blank lines (4)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "charOffset": 1740,
                  "charLength": 44,
                  "snippet": {
                    "text": "def getorderbook(self, instrument, depth=5):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1734,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\n    def getorderbook(self, instrument, depth=5):\n        msg = {}\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0e54756e594e7d7b",
            "equalIndicator/v1": "5535c1a01067a8fb5a404da9c1e84ea686e42eaeda653c51dfe1b6065eade456"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ':'",
            "markdown": "PEP 8: E231 missing whitespace after ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 48,
                  "charOffset": 419,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 258,
                  "charLength": 168,
                  "snippet": {
                    "text": "        deribitClient = RestClient(key=\"1H37RfiB\", secret=\"uwzosu7y179KMaMw1W7wbI9I8DxfYjSq0mfLnbbrPF8\",url=url)\n\n        return {\"deribit\": deribitClient, \"url\":url}\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f4bba345ec5901d4",
            "equalIndicator/v1": "562321cd137e515275b270bc709c7fcdeaadab540a21e8fcf3261d32c2fe16c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 72,
                  "charOffset": 1615,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1469,
                  "charLength": 201,
                  "snippet": {
                    "text": "\n        if not isinstance(orderManagementObject, OrderManagement): return\n        if not isinstance(positionManagementObject, PositionManagement): return\n\n        self.orders = {\"sell\": [], \"buy\": []}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5927cf5c39e6d8c5",
            "equalIndicator/v1": "56e65f23dbd11c751af5fc0ae08331cadd0b7dcf2262ef2af2d988ca5705d4ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 9,
                  "charOffset": 9932,
                  "charLength": 124,
                  "snippet": {
                    "text": "# if it is false then we can deduce that there are no orders present, however if true we only work out what orders are still"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 9865,
                  "charLength": 347,
                  "snippet": {
                    "text": "\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}\n        # if it is false then we can deduce that there are no orders present, however if true we only work out what orders are still\n        if switchIfOrderIsPresent:\n            listOfOrders = listOfOrdersMaps[-1][\"sell\"] if listOfOrdersMaps[-1][\"sell\"] else listOfOrdersMaps[-1][\"buy\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d300372d8551c7be",
            "equalIndicator/v1": "5d1a96d49139c87fb191b57c538f5eaf9f9bf544523f32ed7c9d13683d33b90f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (186 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (186 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 114,
                  "charOffset": 1134,
                  "charLength": 11,
                  "snippet": {
                    "text": "reduce_only"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1007,
                  "charLength": 297,
                  "snippet": {
                    "text": "        try:\n\n            lastOrderObject = self._clientDERIBIT.buy(instrument=indiceName, quantity=str(size),price=str(price),reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Buy order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b4cd8ec1a73be758",
            "equalIndicator/v1": "5e050f8103793548de4efeab66e7174d57493f4f006c63bbb948ae9ff62e7abc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E225 missing whitespace around operator",
            "markdown": "PEP 8: E225 missing whitespace around operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 35,
                  "charOffset": 7578,
                  "charLength": 1,
                  "snippet": {
                    "text": "="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "de9db96180c80f4f",
            "equalIndicator/v1": "6455116ffdad31b2918e21fc01585644ce0bd010ab94d1ae564038e02c5a70b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (149 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (149 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 117,
                  "charOffset": 9496,
                  "charLength": 5,
                  "snippet": {
                    "text": "price"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 9286,
                  "charLength": 399,
                  "snippet": {
                    "text": "                newPrice = newPrice - self.differenceInPrice\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size=newSize, price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # newPrice += self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aceb3907e37114f1",
            "equalIndicator/v1": "648e7079522fdb1914b0603eac086fca98b26b9a8f26749e34662f43349ca353"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 114,
                  "charOffset": 7657,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1adb86c3573ba4bc",
            "equalIndicator/v1": "648f4610d961e8df1aba61ed2edb20efd5e67e3bca638e0e3af7b1247d2a4b2f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 53,
                  "charOffset": 4872,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4793,
                  "charLength": 80,
                  "snippet": {
                    "text": "        sellSignal = True\n\n        return {\"sell\": sellSignal, \"buy\": buySignal}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d9086b01580bea6b",
            "equalIndicator/v1": "64e04e24576de9627ea56aa30d7d6795f8858261599693e8ce049cbfcfb27c28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ':'",
            "markdown": "PEP 8: E231 missing whitespace after ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 32,
                  "charOffset": 2107,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2050,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ff712a5a8d40c40a",
            "equalIndicator/v1": "666897d1e13584ae0cae5677adad590c5460cc574bf932ed94af452822034a76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 24,
                  "charOffset": 1417,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1392,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n\n    def errorFound(self,e):\n        print(str(e) + \" -+waiting for data so sleeping for 15s\")\n        time.sleep(15)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "658e53a3238d2109",
            "equalIndicator/v1": "66aa209ca10542bcd66862a8574124ca62e8a0ac6004d882c9a3377476e3ee1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 9,
                  "charOffset": 9757,
                  "charLength": 35,
                  "snippet": {
                    "text": "listOfMapOrders.append(self.orders)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 9747,
                  "charLength": 47,
                  "snippet": {
                    "text": "\n\n        listOfMapOrders.append(self.orders)\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8cb06f1293c872cc",
            "equalIndicator/v1": "66da9d1980e10c158681249d4d58012bced243b6e1ee7729ffaab03a9e524610"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E265 block comment should start with '# '",
            "markdown": "PEP 8: E265 block comment should start with '# '"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 13,
                  "charOffset": 318,
                  "charLength": 79,
                  "snippet": {
                    "text": "#result = self._clientDERIBIT.getorderbook(instrument=self.indiceName, depth=5)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 255,
                  "charLength": 324,
                  "snippet": {
                    "text": "    def findOurCurrentPosition(self):\n        try:\n            #result = self._clientDERIBIT.getorderbook(instrument=self.indiceName, depth=5)\n            #result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")\n            currentPosition = self._clientDERIBIT.position(self.indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d65c1cf0fa58bfd9",
            "equalIndicator/v1": "672a750dd3bb5813f2fc5a661908128be7a4bf1247a0f5c8465871e0a64c4b04"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 47,
                  "charOffset": 4767,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4675,
                  "charLength": 214,
                  "snippet": {
                    "text": "\n        # remove the previous list of orders\n        if len(self.listOfMapOfOrdersExit) > 2: del(self.listOfMapOfOrdersExit[0])\n        if len(self.listOfMapOfOrdersEnter) > 2: del(self.listOfMapOfOrdersEnter[0])\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "806961bbf983e82a",
            "equalIndicator/v1": "67b8b1d907fa9994c9849c7710319e4e45cefdb1396588c381b0193cac8c0c7e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 34,
                  "charOffset": 973,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 903,
                  "charLength": 117,
                  "snippet": {
                    "text": "        return orderObjectCancelled\n\n    def buyOrder(self, indiceName,size, price, reduce_only=False):\n        try:\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dcd26c6d68305350",
            "equalIndicator/v1": "6901c90fac9595968e9905fbbdd33c4fb0a155b8be106c0e817766276d0f05f7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E401 multiple imports on one line",
            "markdown": "PEP 8: E401 multiple imports on one line"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "charOffset": 36,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 101,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-\n\nimport time, hashlib, base64\nimport json\nfrom collections import OrderedDict"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dcab933fcc84a1ae",
            "equalIndicator/v1": "6e514c23abe64e76b3d6fffbe9c5f0a1b3490908e7cbcee993db7d76c5c59d37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E275 missing whitespace after keyword",
            "markdown": "PEP 8: E275 missing whitespace after keyword"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 14,
                  "charOffset": 3335,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 3280,
                  "charLength": 161,
                  "snippet": {
                    "text": "\n    def getOpenOrders(self, indiceName):\n        while(True):\n            try:\n                orders = self._clientDERIBIT.getopenorders(instrument=indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eb876a77a9da7001",
            "equalIndicator/v1": "759100cab94d7404e29c290d0c43900ad1da7bbb949b6ba18f0b2d4ee67ea42e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 9,
                  "charOffset": 1594,
                  "charLength": 3,
                  "snippet": {
                    "text": "'''"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1584,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n\n        '''\n        Could be more simple but testing so keep separate other wise integrate with whats above if block\n        '''"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "45d76a8e59698a6d",
            "equalIndicator/v1": "7b0363688dd1c85713c79941ab5adbcfe56f01078a81ca262d4c679d6773bbfd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "charOffset": 1017,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 924,
                  "charLength": 193,
                  "snippet": {
                    "text": "        newQuote = self.sortData(self.deribitWebSocket.getListOfData())\n\n        if newQuote == None: return None\n\n        # newQuoteString = str(newQuote[\"bid\"]) +  \"-\" +  str(newQuote[\"ask\"])"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7c56720137025273",
            "equalIndicator/v1": "7ca7b2b4d980fc8eb3a9b180f140c64b1cf7c73422a3924018362e4ecd513730"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 23,
                  "charOffset": 538,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 459,
                  "charLength": 176,
                  "snippet": {
                    "text": "              \"jsonrpc\" : \"2.0\",\n              \"id\" : 0,\n              \"method\" : \"public/auth\",\n              \"params\" : {\n                \"grant_type\" : \"client_credentials\","
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9da73d9bb3728cad",
            "equalIndicator/v1": "7d3a260b15d0a3fc401d2c76657a8f1f38bfb51931641d17dc93aa0d499ab6ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 120,
                  "charOffset": 1947,
                  "charLength": 12,
                  "snippet": {
                    "text": "exitingOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1766,
                  "charLength": 207,
                  "snippet": {
                    "text": "        '''\n        # check if orders are present for exiting\n        mapOfOutcomesExit = self.orderPresent(listOfOrdersMaps=self.listOfMapOfOrdersExit, switchIfOrderIsPresent=self.exitingOrder)\n\n        '''"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7f7dc21e048cfe9e",
            "equalIndicator/v1": "7dfb2a2b701be31abab9757ce56643710fd18d74e98fa6af6b6d762a1623100e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (148 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (148 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 121,
                  "charOffset": 6743,
                  "charLength": 1,
                  "snippet": {
                    "text": "="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 6520,
                  "charLength": 293,
                  "snippet": {
                    "text": "                # reverse the side as we are exiting the position\n                print(\"in position\")\n                self.exitOrderScaling(side=\"sell\", price=data[\"ask\"], orderStatus=currentPositionStatus, listOfMapOrders=self.listOfMapOfOrdersExit)\n                self.exitingOrder = True\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d669d87bc124e0ee",
            "equalIndicator/v1": "80fe480b14009c2f12b7fc85bca455dea3e9598c0d637ff139fb2ca93f36bdb2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 100,
                  "charOffset": 2518,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2376,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    def getsummary(self, currency=\"BTC\"):\n        return self.request(\"/api/v2/public/get_account_summary\", {\"currency\": currency, \"extended\" : 'true'})\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e0b4db98a84baf8",
            "equalIndicator/v1": "8123cbc9d0cad2e0814cb39d0b6211100abf35e8e746329e44f75e70da63905e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 5,
                  "charOffset": 94,
                  "charLength": 23,
                  "snippet": {
                    "text": "def authenticate(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "charOffset": 88,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n\n    def authenticate(self):\n        # testing version\n        url = \"wss://test.deribit.com/ws/api/v2\""
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bfb43bf4ff19d66c",
            "equalIndicator/v1": "822cf592ffd4ec1c1af709ca185d0090fb4ea0a4ade07adc6ca13092fb2c87e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E275 missing whitespace after keyword",
            "markdown": "PEP 8: E275 missing whitespace after keyword"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 53,
                  "charOffset": 4856,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4676,
                  "charLength": 317,
                  "snippet": {
                    "text": "        # remove the previous list of orders\n        if len(self.listOfMapOfOrdersExit) > 2: del(self.listOfMapOfOrdersExit[0])\n        if len(self.listOfMapOfOrdersEnter) > 2: del(self.listOfMapOfOrdersEnter[0])\n\n        # if we find a buy signal and we are not in a position and we have not made any orders to enter"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0a25ddf95576e6b3",
            "equalIndicator/v1": "8583a46fffee1e8559581270facb8a88002611aae8f364f38393ff37915298d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 5,
                  "charOffset": 9799,
                  "charLength": 65,
                  "snippet": {
                    "text": "def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 9793,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n\n    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e1bbb1a60a3f9ef2",
            "equalIndicator/v1": "85f4149e53223724b139eb6fca82188feef6568c4cbebdd57b012ee5050800cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 5,
                  "charOffset": 2536,
                  "charLength": 32,
                  "snippet": {
                    "text": "def index(self, currency=\"BTC\"):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2530,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\n    def index(self, currency=\"BTC\"):\n        return self.request(\"/api/v2/public/get_index\", {\"currency\": currency})\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2234ccfbefdb9c96",
            "equalIndicator/v1": "8852eae45a25fe9f4f4f5cea57999ba92dcf1ee7a45bdaf9f0232bb299d25683"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 86,
                  "charOffset": 2361,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2152,
                  "charLength": 281,
                  "snippet": {
                    "text": "            # here check our position\n            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "45a772073cb875f8",
            "equalIndicator/v1": "896c94c199ac19cd54e20c99bfef4f6419a3658f958fc0267421f5ecbfa4046e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E225 missing whitespace around operator",
            "markdown": "PEP 8: E225 missing whitespace around operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 35,
                  "charOffset": 9019,
                  "charLength": 1,
                  "snippet": {
                    "text": "="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 8954,
                  "charLength": 331,
                  "snippet": {
                    "text": "\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size=newSize,price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # newPrice -= self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "50fdb233cd7d6b31",
            "equalIndicator/v1": "8a3f109a732ce6b73f075703e4d8d37253fef6bc65ae3595a6e905b343b66530"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (147 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (147 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 121,
                  "charOffset": 7071,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 6848,
                  "charLength": 292,
                  "snippet": {
                    "text": "                # reverse the side as we are exiting the position\n                print(\"in position\")\n                self.exitOrderScaling(side=\"buy\", price=data[\"bid\"], orderStatus=currentPositionStatus, listOfMapOrders=self.listOfMapOfOrdersExit)\n                self.exitingOrder = True\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fab8456ad542c899",
            "equalIndicator/v1": "8ac47937be484828b4882886d01ebf238faa3ea038d3b07929aeacdc786abf38"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 19,
                  "charOffset": 3404,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3330,
                  "charLength": 134,
                  "snippet": {
                    "text": "        mapOfExitSignals = {\n            \"buy\" : False,\n            \"sell\" : False\n        }\n        if currentPositionStatus != None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9daa3e87a646c0c9",
            "equalIndicator/v1": "8b4e963ef75b474f5df750aa8a6468556bf206d95226141ee4ba3ae9d125fba2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ':'",
            "markdown": "PEP 8: E231 missing whitespace after ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 45,
                  "charOffset": 10725,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 10587,
                  "charLength": 147,
                  "snippet": {
                    "text": "            mapOfStatus = {\"open\": False, \"fullyFilled\": True}\n            return mapOfStatus\n        return {\"open\": False, \"fullyFilled\":False}\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1410aba0fad1a855",
            "equalIndicator/v1": "8c131d83a7743f85004423be6f7b998054d36cc208e75dd2ff929ef53703ccfc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 218,
                  "charLength": 19,
                  "snippet": {
                    "text": "class GatherData():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 205,
                  "charLength": 103,
                  "snippet": {
                    "text": "import json\n\nclass GatherData():\n    def __init__(self):\n        self.deribitWebSocket = Deribitv2API()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d65bf24a778cf9a8",
            "equalIndicator/v1": "8fc3a44c8036233423c36eecef8b6886eb710c75fe524ca4c385f99a91bd5813"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 36,
                  "charLength": 14,
                  "snippet": {
                    "text": "class Clients:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 87,
                  "snippet": {
                    "text": "from deribit_api import RestClient\n\nclass Clients:\n    def __init__(self):\n        pass"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0bee8758065b5d1e",
            "equalIndicator/v1": "90abbfef4f8a6ef938ce12d6a41e97a13240a76653a96b7a5844437386d95902"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 108,
                  "charOffset": 8225,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 8084,
                  "charLength": 349,
                  "snippet": {
                    "text": "\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size= newSize , price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12c7233f9176c11f",
            "equalIndicator/v1": "9286241f8f91a9c37bbb1c17d87fcf123f75768d6267aa15d94f9c78e47cc13e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 52,
                  "charOffset": 3321,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 3098,
                  "charLength": 260,
                  "snippet": {
                    "text": "        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None\n\n        mapOfExitSignals = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99a4377f396d25d0",
            "equalIndicator/v1": "953ae64da4ee38c4eccde2c982b2673f09dddf28bd2915b86fa029cd54470a20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E301 expected 1 blank line, found 0",
            "markdown": "PEP 8: E301 expected 1 blank line, found 0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 5,
                  "charOffset": 7342,
                  "charLength": 64,
                  "snippet": {
                    "text": "def enterOrderScaling(self, side, size, price, listOfMapOrders):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 7189,
                  "charLength": 265,
                  "snippet": {
                    "text": "\n    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price\n        newSize = size"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fe0e4aee18de9801",
            "equalIndicator/v1": "958525cc76d7210fa6af5be46274b3f5b3a518994bb82ee1af9fe895df311b3e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ':'",
            "markdown": "PEP 8: E231 missing whitespace after ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 40,
                  "charOffset": 1260,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1186,
                  "charLength": 159,
                  "snippet": {
                    "text": "        self.emptyPosition = True\n\n        self.orders = {\"sell\":[], \"buy\":[]}\n        self.listOfMapOfOrdersExit = []\n        self.listOfMapOfOrdersEnter = []"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fa67647a491115cf",
            "equalIndicator/v1": "96203b011f1358edb19e443c0fb1c392a5369fb03a9c01875b2c07a1d3e8551c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (135 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (135 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 113,
                  "charOffset": 6190,
                  "charLength": 22,
                  "snippet": {
                    "text": "listOfMapOfOrdersEnter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 5977,
                  "charLength": 411,
                  "snippet": {
                    "text": "            self.exitClause()\n            print(\"out of position entering both buy and sell orders\")\n            self.enterOrderScaling(side=\"buy\", size=self.fundingAmount, price=data[\"bid\"], listOfMapOrders=self.listOfMapOfOrdersEnter)\n            self.enterOrderScaling(side=\"sell\", size=self.fundingAmount, price=data[\"ask\"], listOfMapOrders=self.listOfMapOfOrdersEnter)\n            self.enteringOrder = True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c6c5ab2815732506",
            "equalIndicator/v1": "982ac49c6b39ab76f1b131ed413c9bb5057fe0734a709ac07bf5d7d5a369f74c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "charOffset": 1115,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 985,
                  "charLength": 232,
                  "snippet": {
                    "text": "\n            # problem with data access and waiting a while and resetting the connection would be a good idea\n            if data == None: continue\n\n            positionStatus = self.positionManagementObject.findOurCurrentPosition()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8affddff597daa7d",
            "equalIndicator/v1": "999c5a1d43ace67276f7a9851ace8790925e55c4b01ef5cf4841ef6c43becfb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (129 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (129 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 121,
                  "charOffset": 7664,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0342123d5fa324fb",
            "equalIndicator/v1": "9a23e3d83b2e5d5a5551d94b150c408f1cbd7ea2103b7bdfb431a543989030e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E251 unexpected spaces around keyword / parameter equals",
            "markdown": "PEP 8: E251 unexpected spaces around keyword / parameter equals"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 105,
                  "charOffset": 7648,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b5e75b52c66dd12a",
            "equalIndicator/v1": "9cabcb0b4edd8bf7bf57a39873bb26576a8d1059aa0ff5f49d44032f57c60ff6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 27,
                  "charOffset": 799,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 719,
                  "charLength": 285,
                  "snippet": {
                    "text": "\n        #  stop exit if order is below average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n            # shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44106f0bb53ae28e",
            "equalIndicator/v1": "9cc3d84132b4a8a4a512775372edacb87ca5acb637eadfa9c93fdc3f07de309e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 113,
                  "charOffset": 1133,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1007,
                  "charLength": 297,
                  "snippet": {
                    "text": "        try:\n\n            lastOrderObject = self._clientDERIBIT.buy(instrument=indiceName, quantity=str(size),price=str(price),reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Buy order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0420c19e0a819b22",
            "equalIndicator/v1": "9d7cb1a6486fba44f15ba3122d5affa35435e5eae295d8e6614b13042f9aa475"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ','",
            "markdown": "PEP 8: E203 whitespace before ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 38,
                  "charOffset": 2113,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2050,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bcca2e6e419233bc",
            "equalIndicator/v1": "9e0f0ce94cc2cdf5a78615deaa9ceaa9070ea096a0b50c13b922a7c3c54d0c98"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 5,
                  "charOffset": 10739,
                  "charLength": 53,
                  "snippet": {
                    "text": "def createACustomOrderObject(self, orderList, order):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 10733,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\n    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7e8e6a3206d7c1c6",
            "equalIndicator/v1": "9fdcda9cd78da7debd74159bc0a82c4a10b5076fa9356ee0fd0bf1adb51c20c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 39,
                  "charOffset": 2661,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2528,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n                        # some order may come back as a None due to the connection timing out\n                        if localOrder == None or localOrder.isOrderNone():\n                            continue\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8222787619fd6af4",
            "equalIndicator/v1": "a21b6d977a8b79e6f651e921daecab629f95a7876f44e34a020b46a1b839a718"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 9,
                  "charOffset": 5873,
                  "charLength": 37,
                  "snippet": {
                    "text": "if intialStartBuy or intialStartSell:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5863,
                  "charLength": 143,
                  "snippet": {
                    "text": "\n\n        if intialStartBuy or intialStartSell:\n            # check the number of trade cycles that have occurred\n            self.exitClause()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "479e88c9bfe82b56",
            "equalIndicator/v1": "a2c3eefaa2b64dfc18e61346061da77b356a54c0cb1e8d857365196b90224574"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 82,
                  "charOffset": 3261,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3086,
                  "charLength": 243,
                  "snippet": {
                    "text": "        '''\n        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "010cfbe20d9a2675",
            "equalIndicator/v1": "a496f95dd4fa220272504f547cc28e37023d50c9498b3769afd0b9360b2964ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 41,
                  "charOffset": 3878,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3716,
                  "charLength": 237,
                  "snippet": {
                    "text": "        listOfPresentOrders = orderManagementObject.getOpenOrders(indiceName=\"BTC-PERPETUAL\")\n        # no orders present\n        if len(listOfPresentOrders) == 0: return False\n        if positionStatus != None:\n            # going short"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "24d7ae2136ab6834",
            "equalIndicator/v1": "a6ecec5cde0e09343a4542995df02f4854f4abb87500e2f5645bb49fa07644bb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "charOffset": 106,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 1,
                  "charOffset": 69,
                  "charLength": 38,
                  "snippet": {
                    "text": "\nif __name__ == \"__main__\":\n    main()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b0855c8d405462e6",
            "equalIndicator/v1": "a884d63ff454a6471461919d1dbea632fbcec135048716efa4a041fb9a03425e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 36,
                  "charOffset": 1499,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1357,
                  "charLength": 215,
                  "snippet": {
                    "text": "            mapOfSignals = self.generateSignalObject.run(data,positionStatus, self.orderManagementObject)\n\n            self.algorithm.run(data,mapOfSignals, self.positionManagementObject, self.orderManagementObject)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "067f61628a5d770d",
            "equalIndicator/v1": "ab1287607d7a51740ca4cb167cc6dbc4876febb6417d94a515c295383bd7e2f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 5,
                  "charOffset": 2117,
                  "charLength": 48,
                  "snippet": {
                    "text": "def getlasttrades(self, instrument, count=None):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2111,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n\n    def getlasttrades(self, instrument, count=None):\n        options = {\n            'instrument': instrument"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fd948b9b97165950",
            "equalIndicator/v1": "aece0ea7e8fdd6698be40e92d395b01b98ad8ce2b907ce2b9cffacfa6452f341"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 18,
                  "charOffset": 3376,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3329,
                  "charLength": 93,
                  "snippet": {
                    "text": "\n        mapOfExitSignals = {\n            \"buy\" : False,\n            \"sell\" : False\n        }"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f455363fcfab0849",
            "equalIndicator/v1": "af09f54947ce7ccc767f33cb04875aa5218b053e9d6e30d02fbe0d09f9646a84"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (132 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (132 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "charOffset": 4308,
                  "charLength": 128,
                  "snippet": {
                    "text": "# finds if we still have orders on the same side as the position as it could fill later on increase/decreasing our average price"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 4209,
                  "charLength": 335,
                  "snippet": {
                    "text": "                return self.findItemByLoopingThroughPresentOrders(listOfPresentOrders, \"buy\")\n\n    # finds if we still have orders on the same side as the position as it could fill later on increase/decreasing our average price\n    def findItemByLoopingThroughPresentOrders(self, listOfOrders, side):\n        for order in listOfOrders:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a212bd55a48144e4",
            "equalIndicator/v1": "b08e736d9b9f2ca3efdc05afbd4ee92a7d0b1110dfa0a6ead989cc205eaf30b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (147 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (147 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 5,
                  "charOffset": 7194,
                  "charLength": 143,
                  "snippet": {
                    "text": "# -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 7188,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n\n    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "43c1b6bbc2c00641",
            "equalIndicator/v1": "b2d0e60bdfa4ae7dee2119358ca38a739b7cf6d3779568e44b2496bf38a6dab4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ':'",
            "markdown": "PEP 8: E231 missing whitespace after ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 30,
                  "charOffset": 1250,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1186,
                  "charLength": 159,
                  "snippet": {
                    "text": "        self.emptyPosition = True\n\n        self.orders = {\"sell\":[], \"buy\":[]}\n        self.listOfMapOfOrdersExit = []\n        self.listOfMapOfOrdersEnter = []"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c62ad1ed16a5eee8",
            "equalIndicator/v1": "b45d29a2c32969a7c76f784f6a445bb9d800941701fcc681936e6ad9a5806cee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E225 missing whitespace around operator",
            "markdown": "PEP 8: E225 missing whitespace around operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 25,
                  "charOffset": 7945,
                  "charLength": 1,
                  "snippet": {
                    "text": "="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 7776,
                  "charLength": 308,
                  "snippet": {
                    "text": "                # new functionality orders are scaled up but not exponentially\n                rateOfScalingOrders = self.rateOfChange * counter\n                newPrice= newPrice - (self.priceMovementUnit + rateOfScalingOrders)\n                # new functionality orders are scaled up but not exponentially\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "854cdadbe317bf9f",
            "equalIndicator/v1": "b5e8e689ceb43cd258dbaf1b1104bb4bdd1e437a35c44ffd40a87148bde4c6ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 5,
                  "charOffset": 4891,
                  "charLength": 47,
                  "snippet": {
                    "text": "def position(self, instrument=\"BTC-PERPETUAL\"):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 4885,
                  "charLength": 89,
                  "snippet": {
                    "text": "\n\n    def position(self, instrument=\"BTC-PERPETUAL\"):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "af70b63190a53636",
            "equalIndicator/v1": "b6a7f95af75e64aa30c4ad8d97c6df1392ecdc25760eb329da832b1d3e9896ab"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "charOffset": 3056,
                  "charLength": 3,
                  "snippet": {
                    "text": "'''"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 3046,
                  "charLength": 51,
                  "snippet": {
                    "text": "\n\n        '''\n        Position checking\n        '''"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bbdb14a0742766d0",
            "equalIndicator/v1": "b727d7a4415074ef86d3611252e78035fe1d85c6c39d12afe58c8ffbfec6018a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 18,
                  "charOffset": 10840,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 10735,
                  "charLength": 168,
                  "snippet": {
                    "text": "    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:\n            return\n        customOrder.setOrder(order)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dcaf662daa95c5ae",
            "equalIndicator/v1": "b93b80a02449456a515a441b3651941cae08d234c2f1485331a3a86aabd4e607"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 2021,
                  "charLength": 24,
                  "snippet": {
                    "text": "def getcurrencies(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2015,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n\n    def getcurrencies(self):\n\n        return self.request(\"api/v2/public/get_currencies\", {})"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "616dd89b3657f94d",
            "equalIndicator/v1": "b9d4e5f786cabd359f27d1fdc9118c013bb5a00638d0a1e2c81c0f0b51be858c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "charOffset": 2381,
                  "charLength": 37,
                  "snippet": {
                    "text": "def getsummary(self, currency=\"BTC\"):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2375,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n\n    def getsummary(self, currency=\"BTC\"):\n        return self.request(\"/api/v2/public/get_account_summary\", {\"currency\": currency, \"extended\" : 'true'})\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c6331263b3c6db49",
            "equalIndicator/v1": "c06c817d476e6ae547a6219e79d719863d7169b821cf943ccaa803d6d1f7d18c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 97,
                  "charOffset": 1671,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1507,
                  "charLength": 354,
                  "snippet": {
                    "text": "        # try using bulk orders to create these orders\n        try:\n            lastOrderObject = self._clientDERIBIT.sell(instrument=indiceName, quantity=str(size),price=str(price), reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Sell order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6616a892650565d6",
            "equalIndicator/v1": "c391b988a241d5e5f173084f006c74213f28a654b57a7cf29667af67e2f222d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 23,
                  "charOffset": 1617,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1568,
                  "charLength": 255,
                  "snippet": {
                    "text": "        bestPrices = None\n\n        if (mapOfData != None) and\\\n                \"params\" in mapOfData and \"data\" in mapOfData[\"params\"] \\\n            and (\"best_bid_price\" in mapOfData['params']['data'] and \"best_ask_price\" in mapOfData['params']['data']):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "40eeade23f56a4b2",
            "equalIndicator/v1": "c3f59b0ef468492abb572746efcac008cc38b8d74de44d95d12348ee372414cd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 112,
                  "charOffset": 9096,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 8954,
                  "charLength": 331,
                  "snippet": {
                    "text": "\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size=newSize,price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # newPrice -= self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2ff818f656b1640a",
            "equalIndicator/v1": "c530a2102fb6f4ae6e96af6463dcb3cc6234cf19c12e51722e26100a7be0b582"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 28,
                  "charOffset": 328,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 273,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n    def getOldOrder(self):\n        if (self._oldOrder != None):\n            temp = Order()\n            temp.setOrder(self._oldOrder)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "59814818ca15c50a",
            "equalIndicator/v1": "c89ce62903024ee6cec82c604850aede097baad9d72c4b0390accc318352eda0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 63,
                  "charOffset": 834,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 697,
                  "charLength": 298,
                  "snippet": {
                    "text": "    def run(self, clientMap):\n        clientDERIBIT = clientMap[\"deribit\"]\n        if not (isinstance(clientDERIBIT, DERIBITClassClient)): return\n        # get data and sort it and return none is the data is the same as before\n        newQuote = self.sortData(self.deribitWebSocket.getListOfData())"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2d858e59f7f96bc6",
            "equalIndicator/v1": "cc73c609418399add095b58b7b8ebcd955225f1037070db6a1b3a0e6641f9fe1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 29,
                  "charOffset": 611,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 516,
                  "charLength": 205,
                  "snippet": {
                    "text": "              \"method\" : \"public/auth\",\n              \"params\" : {\n                \"grant_type\" : \"client_credentials\",\n                \"client_id\" : self.key,\n                \"client_secret\" : self.secret"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "91d6dfa37810200e",
            "equalIndicator/v1": "cd0588bdc5699b0fec265beb13983a6464e6e7e6c67ed59783b87dd5012f7e5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W292 no newline at end of file",
            "markdown": "PEP 8: W292 no newline at end of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 108,
                  "charOffset": 1571,
                  "charLength": 1,
                  "snippet": {
                    "text": ")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1357,
                  "charLength": 215,
                  "snippet": {
                    "text": "            mapOfSignals = self.generateSignalObject.run(data,positionStatus, self.orderManagementObject)\n\n            self.algorithm.run(data,mapOfSignals, self.positionManagementObject, self.orderManagementObject)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d07b98f530825a2e",
            "equalIndicator/v1": "cdd2b3cece2b37a7fc66ec49efb01ebfc4b6344e0da557aac00fac79494f8a61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (126 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (126 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 9,
                  "charOffset": 5099,
                  "charLength": 118,
                  "snippet": {
                    "text": "# if we find a buy signal and we are in a position and the position is a short and we have not made any orders to exit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4890,
                  "charLength": 484,
                  "snippet": {
                    "text": "        # if we find a buy signal and we are not in a position and we have not made any orders to enter\n        intialStartBuy = mapOfSignals[\"buy\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a buy signal and we are in a position and the position is a short and we have not made any orders to exit\n        exitPositionBuy = mapOfExitSignals[\"buy\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"sell\" and (not self.exitingOrder)\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6479cfc104c064d4",
            "equalIndicator/v1": "cdda16f75bbd482174060cbc3a63e0f59d7dcbda8f34bcc367d74989627faf40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E124 closing bracket does not match visual indentation",
            "markdown": "PEP 8: E124 closing bracket does not match visual indentation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 13,
                  "charOffset": 356,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 266,
                  "charLength": 130,
                  "snippet": {
                    "text": "             \"params\": {\n                \"channels\": [\"quote.BTC-PERPETUAL\"]}\n            }\n\n        self.listOfNotifications = []"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6397f0b781345b20",
            "equalIndicator/v1": "d04c292f2e80cf07d86767cd49f2d57cfcf19f5caab842539e26774b635ff2f0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 32,
                  "charOffset": 707,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 583,
                  "charLength": 168,
                  "snippet": {
                    "text": "                \"grant_type\" : \"client_credentials\",\n                \"client_id\" : self.key,\n                \"client_secret\" : self.secret\n              }\n            }"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99e462f13459cca4",
            "equalIndicator/v1": "d267f8a9cd48aa99146de808921c12b48ba192a0e163199b05be2890f2b84199"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E275 missing whitespace after keyword",
            "markdown": "PEP 8: E275 missing whitespace after keyword"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 14,
                  "charOffset": 2218,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 2076,
                  "charLength": 254,
                  "snippet": {
                    "text": "        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):\n            try:\n                orderMapList = self._clientDERIBIT.getopenorders(instrument=instrument)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "944bcd0c32e88a3c",
            "equalIndicator/v1": "d4e7c6149c0de8885a3e13d162bf5220dadfa8c25a24a449bfe63c883cb6e62e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 9,
                  "charOffset": 439,
                  "charLength": 19,
                  "snippet": {
                    "text": "self.auth_creds = {"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 429,
                  "charLength": 86,
                  "snippet": {
                    "text": "\n\n        self.auth_creds = {\n              \"jsonrpc\" : \"2.0\",\n              \"id\" : 0,"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "313a2dd1742ca1ae",
            "equalIndicator/v1": "d53af0eb9761154463dce7787770c24aa7afca1d7ce7120cfd830d5e6e705c2a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 27,
                  "charOffset": 3919,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3810,
                  "charLength": 197,
                  "snippet": {
                    "text": "        # no orders present\n        if len(listOfPresentOrders) == 0: return False\n        if positionStatus != None:\n            # going short\n            if positionStatus['direction'] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cc7230ac57569bcc",
            "equalIndicator/v1": "d5471176bc432e3008af7997a24454bbf3ad1b72c26baeba12a3f69eaf4d7521"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E125 continuation line with same indent as next logical line",
            "markdown": "PEP 8: E125 continuation line with same indent as next logical line"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 13,
                  "charOffset": 1717,
                  "charLength": 3,
                  "snippet": {
                    "text": "and"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1595,
                  "charLength": 318,
                  "snippet": {
                    "text": "        if (mapOfData != None) and\\\n                \"params\" in mapOfData and \"data\" in mapOfData[\"params\"] \\\n            and (\"best_bid_price\" in mapOfData['params']['data'] and \"best_ask_price\" in mapOfData['params']['data']):\n\n            bestPrices = {\"bid\": Decimal(mapOfData['params']['data']['best_bid_price']),"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20a95f4044b3f62e",
            "equalIndicator/v1": "d5b9afd8c9a77cca2ddd8e95fdb95f8e5e6a339c20baf61f16e8bbd6ef721eb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E275 missing whitespace after keyword",
            "markdown": "PEP 8: E275 missing whitespace after keyword"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "charOffset": 824,
                  "charLength": 1,
                  "snippet": {
                    "text": "("
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 212,
                  "snippet": {
                    "text": "        self.gatherDataObject.start()\n\n        while(True):\n            # modular objects, this way all objects are created externally and can be appened on\n            data = self.gatherDataObject.run(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2256c514e351b016",
            "equalIndicator/v1": "d5bc695b604b9801c840a685140ef98f51a030914cb596b343d69f84dc8b1b5d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (127 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (127 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 118,
                  "charOffset": 2193,
                  "charLength": 9,
                  "snippet": {
                    "text": "orderItem"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2050,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4a62c2370cf30e8d",
            "equalIndicator/v1": "d694b2f356e04b731407158349386106dfff6f01e29d9c0acc02902638d90f36"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 85,
                  "charLength": 24,
                  "snippet": {
                    "text": "class GenerateSignals():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 72,
                  "charLength": 128,
                  "snippet": {
                    "text": "import math\n\nclass GenerateSignals():\n    def __init__(self):\n        # it means that the list will hold upto 30 minutes of data"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "05d6f99339c50358",
            "equalIndicator/v1": "de17563ab7d1d88733b6b64502c6b9c7122acdf9fa88debf3c5efdec3080b626"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 24,
                  "charOffset": 482,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 430,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n        self.auth_creds = {\n              \"jsonrpc\" : \"2.0\",\n              \"id\" : 0,\n              \"method\" : \"public/auth\","
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a519db28b185170",
            "equalIndicator/v1": "e36a7ed654ba267ac0e2321c9876ba3694291a805356a5c332323a3ba58efd78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 62,
                  "charOffset": 1418,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1302,
                  "charLength": 270,
                  "snippet": {
                    "text": "            self.orderManagementObject.run(clientMap)\n\n            mapOfSignals = self.generateSignalObject.run(data,positionStatus, self.orderManagementObject)\n\n            self.algorithm.run(data,mapOfSignals, self.positionManagementObject, self.orderManagementObject)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ceb3fb63f4172965",
            "equalIndicator/v1": "e4b48051f78bdbe2cc21c99fd0a8f4e35ce5f8f69583e7aafe97e1b7c98ed213"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 96,
                  "charOffset": 1116,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1007,
                  "charLength": 297,
                  "snippet": {
                    "text": "        try:\n\n            lastOrderObject = self._clientDERIBIT.buy(instrument=indiceName, quantity=str(size),price=str(price),reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Buy order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b50753db31b30d9c",
            "equalIndicator/v1": "e9cfc8d617ffd7da71b8a968234ee194690991e560a96b820a1b46e15215dfaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "charOffset": 179,
                  "charLength": 25,
                  "snippet": {
                    "text": "class RestClient(object):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "charOffset": 102,
                  "charLength": 182,
                  "snippet": {
                    "text": "from websocket import create_connection, WebSocketConnectionClosedException\n\nclass RestClient(object):\n    def __init__(self, key=None, secret=None, url=None):\n        self.key = key"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fcb6d8ad9fe69146",
            "equalIndicator/v1": "ec1f3a9002190691977a4fd7a7a059b14b6ee02b4331f92fd4c221e13d47533d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (188 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (188 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 116,
                  "charOffset": 1690,
                  "charLength": 11,
                  "snippet": {
                    "text": "reduce_only"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1507,
                  "charLength": 354,
                  "snippet": {
                    "text": "        # try using bulk orders to create these orders\n        try:\n            lastOrderObject = self._clientDERIBIT.sell(instrument=indiceName, quantity=str(size),price=str(price), reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Sell order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "79aa5cb994d251f5",
            "equalIndicator/v1": "ed7e3dd84793a7bf3cf455550bd4c3c098c7e1a03fed1e5532651454fb30ad9c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 5,
                  "charOffset": 7194,
                  "charLength": 143,
                  "snippet": {
                    "text": "# -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 7188,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n\n    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "43c1b6bbc2c00641",
            "equalIndicator/v1": "ed880df0693659ff2ddc0c8ab5d8ae5edba984b18e59f3399a6c6c5c6596227d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (155 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (155 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 121,
                  "charOffset": 5338,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4994,
                  "charLength": 485,
                  "snippet": {
                    "text": "        intialStartBuy = mapOfSignals[\"buy\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a buy signal and we are in a position and the position is a short and we have not made any orders to exit\n        exitPositionBuy = mapOfExitSignals[\"buy\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"sell\" and (not self.exitingOrder)\n\n        # if we find a sell signal and we are not in a position and we have not made any orders to enter"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6785debb054bc981",
            "equalIndicator/v1": "f46c4b8415e4927f0a654c185d5447628ddb518ea70644cd82ba895e83de9027"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E711 comparison to None should be 'if cond is not None:'",
            "markdown": "PEP 8: E711 comparison to None should be 'if cond is not None:'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 39,
                  "charOffset": 2314,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2152,
                  "charLength": 281,
                  "snippet": {
                    "text": "            # here check our position\n            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a816cc4e940f0244",
            "equalIndicator/v1": "f4eb55d3da118fb832457971f63d37c0a9872301afc780ed13774818db5e656d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E701 multiple statements on one line (colon)",
            "markdown": "PEP 8: E701 multiple statements on one line (colon)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 28,
                  "charOffset": 1122,
                  "charLength": 1,
                  "snippet": {
                    "text": ":"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 985,
                  "charLength": 232,
                  "snippet": {
                    "text": "\n            # problem with data access and waiting a while and resetting the connection would be a good idea\n            if data == None: continue\n\n            positionStatus = self.positionManagementObject.findOurCurrentPosition()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "951e9cc95295bfa1",
            "equalIndicator/v1": "f62132c2ca9d8459d0d046dd4e27297a916fc34081edc01f650363a6e8734c2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (4)",
            "markdown": "PEP 8: E303 too many blank lines (4)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 5,
                  "charOffset": 11644,
                  "charLength": 21,
                  "snippet": {
                    "text": "def exitClause(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 11638,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n\n    def exitClause(self):\n        self.numberOfTradeCycles += 1\n        if self.numberOfTradeCycles >= self.numberOfTradeCyclesLimit:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4910ffca8436213d",
            "equalIndicator/v1": "f626b3f0d15aca9e681b5744864d6b13ba3684d547fa65b7ef0a7d68a706ec89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (3)",
            "markdown": "PEP 8: E303 too many blank lines (3)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "charOffset": 337,
                  "charLength": 64,
                  "snippet": {
                    "text": "def run(self, mapOfData, positionStatus, orderManagementObject):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 331,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    def run(self, mapOfData, positionStatus, orderManagementObject):\n        # changed it from the close price of previous trades to the best quotes\n        meanPriceFromQuotes = mapOfData[\"mean\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a3bc784f19b38435",
            "equalIndicator/v1": "f6cf422ce9b01ca5643ab36409c949e4e03b8ba535e2367dea9d15ef59b40003"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 5,
                  "charOffset": 4292,
                  "charLength": 63,
                  "snippet": {
                    "text": "def cancelall(self, instrument=\"BTC-PERPETUAL\", typeDef=\"all\"):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4286,
                  "charLength": 105,
                  "snippet": {
                    "text": "\n\n    def cancelall(self, instrument=\"BTC-PERPETUAL\", typeDef=\"all\"):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c1fbf88947f14bb3",
            "equalIndicator/v1": "f7715c3f4268b025f43974b0daa6dc116b112c974c5b5f727ebd7db9b8fdf35c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ','",
            "markdown": "PEP 8: E203 whitespace before ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 42,
                  "charOffset": 1560,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1438,
                  "charLength": 215,
                  "snippet": {
                    "text": "                data = json.loads(ws.recv())\n                if \"error\" in data:\n                    raise ValueError(data , \"issue with loading api \")\n                    break\n                return data[\"result\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7fcd2d96dc3f98e0",
            "equalIndicator/v1": "fa9f22dcec7f071d8d0a47f626f77b4121adf9ad431e8a5ae4fffa447e12a6bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E303 too many blank lines (2)",
            "markdown": "PEP 8: E303 too many blank lines (2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 5,
                  "charOffset": 10948,
                  "charLength": 38,
                  "snippet": {
                    "text": "def cancelTakeOutPositionOrders(self):"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 10942,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n\n    def cancelTakeOutPositionOrders(self):\n        # print(\"canceling exit position orders\")\n        listOfOrders = self.orderManagementObject.getOpenOrders(self.indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "deb0da0b198f5866",
            "equalIndicator/v1": "fb15c1e4c6ede310074b97c3d565ffb67682390cfed14f26499bf47b2aedc66f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E231 missing whitespace after ','",
            "markdown": "PEP 8: E231 missing whitespace after ','"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 35,
                  "charOffset": 1473,
                  "charLength": 1,
                  "snippet": {
                    "text": ","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1414,
                  "charLength": 160,
                  "snippet": {
                    "text": "            return None\n\n    def sellOrder(self, indiceName,size, price, reduce_only=False):\n        # try using bulk orders to create these orders\n        try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d48d53225056fb7",
            "equalIndicator/v1": "fd19d7db70a54414afd916a9d03f82c26ff22cbf10078c7b8e07fbb2efd01ff0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 9,
                  "charOffset": 463,
                  "charLength": 15,
                  "snippet": {
                    "text": "getCurrentOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 431,
                  "charLength": 86,
                  "snippet": {
                    "text": "        return Order()\n\n    def getCurrentOrder(self):\n        return self._lastOrder\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1202740aef9f378b",
            "equalIndicator/v1": "0b0d3e887c288f6b691eaddbdc43f9220b03e9497047e0b661551b9beec7f167"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "charOffset": 641,
                  "charLength": 12,
                  "snippet": {
                    "text": "signalToSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 580,
                  "charLength": 139,
                  "snippet": {
                    "text": "        mapOfSignals = self.generateSignal(tempMap)\n\n        signalToSell = mapOfSignals[\"sell\"]\n        signalToBuy = mapOfSignals[\"buy\"]\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f1f15d958096f65",
            "equalIndicator/v1": "117d8947ba81516d2e0498a1713996644dc009ed09d47403f6d9cee27067012a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "charOffset": 1504,
                  "charLength": 19,
                  "snippet": {
                    "text": "getStatusIsRejected"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1474,
                  "charLength": 135,
                  "snippet": {
                    "text": "        return False\n\n    def getStatusIsRejected(self):\n        if self._lastOrder.get('state') == 'Canceled':\n            return True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "788c463232935a26",
            "equalIndicator/v1": "16bf7a297a8c44e3c79bb2888b3ea1a4e5bba2191595b519490746ff993ccd24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 7346,
                  "charLength": 17,
                  "snippet": {
                    "text": "enterOrderScaling"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 7189,
                  "charLength": 265,
                  "snippet": {
                    "text": "\n    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price\n        newSize = size"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "55de4ef00175bf42",
            "equalIndicator/v1": "1771dd333ba7ae76fb9a095ee191602ab1743b4f5acd13e725d70cb5bc2fda66"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "charOffset": 4776,
                  "charLength": 9,
                  "snippet": {
                    "text": "buySignal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4721,
                  "charLength": 98,
                  "snippet": {
                    "text": "    def generateSignal(self, mapOfDataPrice):\n\n        buySignal = True\n        sellSignal = True\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ccb77c44df02b015",
            "equalIndicator/v1": "19f330dcd94ee5764efc1472eeab51342207dbb5a92b5aca383a1affd9f6928b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 9,
                  "charOffset": 10952,
                  "charLength": 27,
                  "snippet": {
                    "text": "cancelTakeOutPositionOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 10942,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n\n    def cancelTakeOutPositionOrders(self):\n        # print(\"canceling exit position orders\")\n        listOfOrders = self.orderManagementObject.getOpenOrders(self.indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b40a76219fba50db",
            "equalIndicator/v1": "1badc1765634a549f29c58b8403d804bdca424162b6af6c58fb7de7a7cd744b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 21,
                  "charOffset": 3279,
                  "charLength": 12,
                  "snippet": {
                    "text": "signalToSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 3182,
                  "charLength": 229,
                  "snippet": {
                    "text": "                    RETURNS TRUE IF ORDER IS PRESENT\n                    '''\n                    signalToSell = not self.checkIfAnyOrdersAreStillPresent(positionStatus, orderManagementObject)\n\n                    if signalToSell:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3927c367dbe3aa5a",
            "equalIndicator/v1": "215f9685691b1e6b30d8360ccdf36ea60f50ff9cdb12eb90179f3e5b14e48c8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 53,
                  "charOffset": 4489,
                  "charLength": 12,
                  "snippet": {
                    "text": "listOfOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 4303,
                  "charLength": 284,
                  "snippet": {
                    "text": "\n    # finds if we still have orders on the same side as the position as it could fill later on increase/decreasing our average price\n    def findItemByLoopingThroughPresentOrders(self, listOfOrders, side):\n        for order in listOfOrders:\n            if order[\"direction\"] == side:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "70191c8108ce8bf7",
            "equalIndicator/v1": "21c83937c8a15c7265a211035c44e16aa2b642b6ef461d85efd3c180b946a940"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 490,
                  "charLength": 19,
                  "snippet": {
                    "text": "meanPriceFromQuotes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 333,
                  "charLength": 246,
                  "snippet": {
                    "text": "    def run(self, mapOfData, positionStatus, orderManagementObject):\n        # changed it from the close price of previous trades to the best quotes\n        meanPriceFromQuotes = mapOfData[\"mean\"]\n\n        tempMap = {\"close\": meanPriceFromQuotes}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a588899402a5f41b",
            "equalIndicator/v1": "2347d572bf8f136ae936367779232cfd994ca58eaaa26cd2db3b28800b3f5790"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 3599,
                  "charLength": 16,
                  "snippet": {
                    "text": "exceptionHandler"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3507,
                  "charLength": 205,
                  "snippet": {
                    "text": "                self.exceptionHandler(e, \" getOpenOrders function throw an error\")\n\n    def exceptionHandler(self, e, task):\n        print(str(e), \" error occured when doing \" + task)\n        time.sleep(5)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aefe7b56d2148c39",
            "equalIndicator/v1": "249278eddaa7a3d4dea8fc0b7385a03c684122ab899ec3dd1555e16a42e05ad7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 9,
                  "charOffset": 1156,
                  "charLength": 9,
                  "snippet": {
                    "text": "isSideBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1099,
                  "charLength": 165,
                  "snippet": {
                    "text": "        return self._lastOrder.get('direction')\n\n    def isSideBuy(self):\n        temp = self._lastOrder[\"direction\"]\n        return (temp == \"Buy\" or temp == \"buy\")"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d2ea5fa826140a86",
            "equalIndicator/v1": "25e033cb49acf31f4b58f45c7f6159d9116c44f16bfe7154916b1e2a5043cb1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 17,
                  "charOffset": 7937,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 7776,
                  "charLength": 308,
                  "snippet": {
                    "text": "                # new functionality orders are scaled up but not exponentially\n                rateOfScalingOrders = self.rateOfChange * counter\n                newPrice= newPrice - (self.priceMovementUnit + rateOfScalingOrders)\n                # new functionality orders are scaled up but not exponentially\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3811a90eed351b3c",
            "equalIndicator/v1": "283dfdd98aac84171220dccf79f4e37fe3e00d2e20369cee70f438c521c1404c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "charOffset": 607,
                  "charLength": 20,
                  "snippet": {
                    "text": "orderObjectCancelled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 533,
                  "charLength": 197,
                  "snippet": {
                    "text": "        if not isinstance(orderObject, Order):\n            return\n        orderObjectCancelled = None\n        try:\n            orderObjectCancelled = self._clientDERIBIT.cancel(orderObject.getId())"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c5cfafbb69704034",
            "equalIndicator/v1": "292c6b1a7b97d656c3b161a23629027aecc368f9e0a7a9d6416dc70e20e72d87"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 9,
                  "charOffset": 948,
                  "charLength": 8,
                  "snippet": {
                    "text": "buyOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 903,
                  "charLength": 117,
                  "snippet": {
                    "text": "        return orderObjectCancelled\n\n    def buyOrder(self, indiceName,size, price, reduce_only=False):\n        try:\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6fa83a835da56647",
            "equalIndicator/v1": "2a3691bb3cdd7c04e8c56fd4f8a563fa666f6077e46802eaebc43b759a298b76"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 9,
                  "charOffset": 3724,
                  "charLength": 19,
                  "snippet": {
                    "text": "listOfPresentOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 3527,
                  "charLength": 365,
                  "snippet": {
                    "text": "    # checks if orders are present on our current position thus moving the average price in our favour\n    def checkIfAnyOrdersAreStillPresent(self, positionStatus, orderManagementObject):\n        listOfPresentOrders = orderManagementObject.getOpenOrders(indiceName=\"BTC-PERPETUAL\")\n        # no orders present\n        if len(listOfPresentOrders) == 0: return False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1c5f37347bc5a383",
            "equalIndicator/v1": "2a5cebfdae66f1430eadddbedf5a88a399ed9050f243b88ddc6b8d42c3c4feaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 9,
                  "charOffset": 5226,
                  "charLength": 15,
                  "snippet": {
                    "text": "exitPositionBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4994,
                  "charLength": 485,
                  "snippet": {
                    "text": "        intialStartBuy = mapOfSignals[\"buy\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a buy signal and we are in a position and the position is a short and we have not made any orders to exit\n        exitPositionBuy = mapOfExitSignals[\"buy\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"sell\" and (not self.exitingOrder)\n\n        # if we find a sell signal and we are not in a position and we have not made any orders to enter"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8e65c5437041066",
            "equalIndicator/v1": "2b795313665c7230cde2173eebe43125585f7afda7cc5ce12cd79ce045368af9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 9,
                  "charOffset": 10743,
                  "charLength": 24,
                  "snippet": {
                    "text": "createACustomOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 10733,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\n    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "96453df300d3af42",
            "equalIndicator/v1": "2c0f11c5cbb68d50f962107806aa2dee1359c881d2e08f8e19d2c55d75a69c75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "charOffset": 174,
                  "charLength": 10,
                  "snippet": {
                    "text": "setClients"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 123,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self.indiceName = \"BTC-PERPETUAL\"\n\n    def setClients(self, clientMap):\n        self._clientDERIBIT = clientMap[\"deribit\"]\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98eac9322e36b700",
            "equalIndicator/v1": "312c064a5f621582ef4fbb1aa966291ace1dce9e6b6fbb4747907891183c74a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 9,
                  "charOffset": 501,
                  "charLength": 11,
                  "snippet": {
                    "text": "cancelOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 427,
                  "charLength": 171,
                  "snippet": {
                    "text": "            self.exceptionHandler(e, \" error on cancelling all\")\n\n    def cancelOrder(self, orderObject):\n        if not isinstance(orderObject, Order):\n            return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8fe6cad284ea2654",
            "equalIndicator/v1": "319c2e1d36a123115486dcba2c99a8a935b62ff5ad56e79a7cacdf939ad1e7d7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 17,
                  "charOffset": 8450,
                  "charLength": 19,
                  "snippet": {
                    "text": "rateOfScalingOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 8252,
                  "charLength": 411,
                  "snippet": {
                    "text": "                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially\n                rateOfScalingOrders = self.rateOfChange * counter\n                newPrice = newPrice + (self.priceMovementUnit + rateOfScalingOrders)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b95fc7015649243",
            "equalIndicator/v1": "31fe6c2e10aecb7f4ad1827012e9d3d7a4294e2d07c01e1c31973b14af3e65e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 9,
                  "charOffset": 8856,
                  "charLength": 12,
                  "snippet": {
                    "text": "numberOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 8788,
                  "charLength": 165,
                  "snippet": {
                    "text": "        newPrice = price\n        newSize = self.exitingSize\n        numberOrders = int(abs(orderStatus[\"size\"])/newSize)\n\n        for counter in range(numberOrders):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "970bc3931b2eb34f",
            "equalIndicator/v1": "328544dfdbe90c30daa376cf5c999f2a8e9ecf07215ecd1962831e9b6799471c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 19,
                  "charOffset": 351,
                  "charLength": 9,
                  "snippet": {
                    "text": "mapOfData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 331,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    def run(self, mapOfData, positionStatus, orderManagementObject):\n        # changed it from the close price of previous trades to the best quotes\n        meanPriceFromQuotes = mapOfData[\"mean\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "42755712d31aadb9",
            "equalIndicator/v1": "3b2db5c24711854971b511d04c454c647e7f97d0e54b37e95f2eed073e1e6c79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 40,
                  "charOffset": 10774,
                  "charLength": 9,
                  "snippet": {
                    "text": "orderList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 10733,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\n    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4088d49ec2b51601",
            "equalIndicator/v1": "3ca232ee79912160275672de2bd123d62b57d5a007f97399299e64ff3f4e24e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "charOffset": 9874,
                  "charLength": 11,
                  "snippet": {
                    "text": "mapOfStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 9795,
                  "charLength": 296,
                  "snippet": {
                    "text": "    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}\n        # if it is false then we can deduce that there are no orders present, however if true we only work out what orders are still\n        if switchIfOrderIsPresent:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "91752409cf0c9600",
            "equalIndicator/v1": "3eea9631378535c5c9979f7f6d2df701621cc1be962c62cd244fd72429d411c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 29,
                  "charOffset": 3309,
                  "charLength": 10,
                  "snippet": {
                    "text": "indiceName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3279,
                  "charLength": 80,
                  "snippet": {
                    "text": "\n\n    def getOpenOrders(self, indiceName):\n        while(True):\n            try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f70b5d4b86324ef5",
            "equalIndicator/v1": "41abc247bdc24843c60947cf5cfe07d7392712d05b30a078dcbb2546dcc7591d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 13,
                  "charOffset": 1146,
                  "charLength": 14,
                  "snippet": {
                    "text": "positionStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1095,
                  "charLength": 205,
                  "snippet": {
                    "text": "            if data == None: continue\n\n            positionStatus = self.positionManagementObject.findOurCurrentPosition()\n\n            if (positionStatus != None) and (\"error\" in positionStatus): continue"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d09877b837d040c5",
            "equalIndicator/v1": "44af0d85d2be65b11573c3d71dd4a8cde13dbebca10f507db69a5398194d52ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1274,
                  "charLength": 10,
                  "snippet": {
                    "text": "isSideSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1217,
                  "charLength": 168,
                  "snippet": {
                    "text": "        return (temp == \"Buy\" or temp == \"buy\")\n\n    def isSideSell(self):\n        temp = self._lastOrder[\"direction\"]\n        return (temp == \"Sell\" or temp == \"sell\")"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b957be09405830ec",
            "equalIndicator/v1": "478aff738cd50e4bd02109c25a3c06dad1f35b5a309b01c3c9179cc2cb08db26"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "charOffset": 1395,
                  "charLength": 11,
                  "snippet": {
                    "text": "isOrderNone"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1336,
                  "charLength": 137,
                  "snippet": {
                    "text": "        return (temp == \"Sell\" or temp == \"sell\")\n\n    def isOrderNone(self):\n        if self._lastOrder == None:\n            return True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "578e8bbf71a45326",
            "equalIndicator/v1": "4884166edb9c8f3e68708c1ad881b662f663a135cd0c40371941f70da58a0e06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 9,
                  "charOffset": 11045,
                  "charLength": 12,
                  "snippet": {
                    "text": "listOfOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 10944,
                  "charLength": 262,
                  "snippet": {
                    "text": "    def cancelTakeOutPositionOrders(self):\n        # print(\"canceling exit position orders\")\n        listOfOrders = self.orderManagementObject.getOpenOrders(self.indiceName)\n        for order in listOfOrders:\n            if order[\"amount\"] == (self.exitingSize):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3080c41a1af94387",
            "equalIndicator/v1": "4c1166e0bb20af0b8432d852b1d36e836a179e60c8ea0e363e25abb2f78c8f7b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 9,
                  "charOffset": 4729,
                  "charLength": 14,
                  "snippet": {
                    "text": "generateSignal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    # this means we are always going to enter orders, as the signal is always true\n    def generateSignal(self, mapOfDataPrice):\n\n        buySignal = True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "96323b5a8e1c9f6e",
            "equalIndicator/v1": "4c5c75b04ab0eae8738777c9e07d7cdd65518cd8abb70799714759fe85295b6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 21,
                  "charOffset": 1562,
                  "charLength": 12,
                  "snippet": {
                    "text": "signalToSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1410,
                  "charLength": 174,
                  "snippet": {
                    "text": "                if meanPriceFromQuotes < (enteredPrice):\n                    # print(\"price is too low turn signalToSell to false\")\n                    signalToSell = False\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "08e5a940bd672da3",
            "equalIndicator/v1": "4e79c15f0d53843a57875c1e0651c803ac73b655f4edbea887022dd1e306bacc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 26,
                  "charOffset": 5166,
                  "charLength": 12,
                  "snippet": {
                    "text": "orderId=None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 5139,
                  "charLength": 81,
                  "snippet": {
                    "text": "\n\n    def orderstate(self, orderId=None):\n        params = {}\n        if orderId:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cecf89ad7727bd8b",
            "equalIndicator/v1": "4f087bd1b23536fa07bbd46581b5c33d072b38e52574dd2949ac0dd2fad04e4a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 48,
                  "charOffset": 2726,
                  "charLength": 13,
                  "snippet": {
                    "text": "postOnly=None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2649,
                  "charLength": 153,
                  "snippet": {
                    "text": "\n    # put a hidden option in\n    def buy(self, instrument, quantity, price, postOnly=None, reduce_only=None, hidden=None, label=None):\n\n        msg = {}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2187ee82be976bff",
            "equalIndicator/v1": "5073a04ac550e5da3ca2778cb5d2ee7efed72b83200c043d3c63d6b024c5f3c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 9,
                  "charOffset": 713,
                  "charLength": 11,
                  "snippet": {
                    "text": "getCoinSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 665,
                  "charLength": 106,
                  "snippet": {
                    "text": "        self._lastOrder['size'] = size\n\n    def getCoinSize(self):\n        return self._lastOrder['size']\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ba03203b2d4cabfc",
            "equalIndicator/v1": "54202260fe23402c2201e093a8e8f46a1d6a45595b5648c0dc9748ffa7390964"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 9,
                  "charOffset": 7440,
                  "charLength": 7,
                  "snippet": {
                    "text": "newSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 7338,
                  "charLength": 175,
                  "snippet": {
                    "text": "    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price\n        newSize = size\n\n        for counter in range(self.numberOfScalingOrders):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e985bd4ec60546d8",
            "equalIndicator/v1": "553f4933015f4f2ae10decd815197073b2d1e855803663c12a597f4959ae36ed"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "charOffset": 2059,
                  "charLength": 9,
                  "snippet": {
                    "text": "orderItem"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1997,
                  "charLength": 207,
                  "snippet": {
                    "text": "    def orderStatus(self, listOfOrders, instrument):\n\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "36e1007013503406",
            "equalIndicator/v1": "557ba1d36dd03ef78c45d0842b2c2c14cf870d45d2d2f6a24b74a1077b857e95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 21,
                  "charOffset": 2813,
                  "charLength": 11,
                  "snippet": {
                    "text": "signalToBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2712,
                  "charLength": 231,
                  "snippet": {
                    "text": "                    but RETURNS TRUE IF ORDER IS PRESENT\n                    '''\n                    signalToBuy = not self.checkIfAnyOrdersAreStillPresent(positionStatus, orderManagementObject)\n\n                    if signalToBuy:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ca04f088cf7f1c3e",
            "equalIndicator/v1": "55a8d6f00a7e430a117d745ec46f52ddaab92a7d57475be97235578345ccb24a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "charOffset": 3638,
                  "charLength": 31,
                  "snippet": {
                    "text": "checkIfAnyOrdersAreStillPresent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3526,
                  "charLength": 311,
                  "snippet": {
                    "text": "\n    # checks if orders are present on our current position thus moving the average price in our favour\n    def checkIfAnyOrdersAreStillPresent(self, positionStatus, orderManagementObject):\n        listOfPresentOrders = orderManagementObject.getOpenOrders(indiceName=\"BTC-PERPETUAL\")\n        # no orders present"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6cb61479d4cd85b9",
            "equalIndicator/v1": "577f059c742d49acc7f28a3b79e3a3a94c5f755b789e487c69c6dc9fdfa38bc7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 9,
                  "charOffset": 282,
                  "charLength": 11,
                  "snippet": {
                    "text": "getOldOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 237,
                  "charLength": 127,
                  "snippet": {
                    "text": "        self._lastOrder = lastOrder\n\n    def getOldOrder(self):\n        if (self._oldOrder != None):\n            temp = Order()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9fae4a5ef69b8e3",
            "equalIndicator/v1": "58570aec05a4fa78752fe4c1169d0d180c18b65e20706731d0b11422c3cf5b72"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 19,
                  "charOffset": 168,
                  "charLength": 9,
                  "snippet": {
                    "text": "clientMap"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 114,
                  "charLength": 117,
                  "snippet": {
                    "text": "        self._clientDERIBIT = None\n\n    def run(self, clientMap):\n        self._clientDERIBIT = clientMap[\"deribit\"]\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e6c04567ebf17dc1",
            "equalIndicator/v1": "598416c3e9a2ae9ea426039581215d63fe624552105ab3dfe2cd669cb8206e75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 9,
                  "charOffset": 2836,
                  "charLength": 18,
                  "snippet": {
                    "text": "mapOfOutcomesEnter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2765,
                  "charLength": 268,
                  "snippet": {
                    "text": "        '''\n        # check if orders are present for entering\n        mapOfOutcomesEnter = self.orderPresent(listOfOrdersMaps=self.listOfMapOfOrdersEnter, switchIfOrderIsPresent=self.enteringOrder)\n        '''\n        Order checking and editing above the if statement"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ebc1af12c47a7b6a",
            "equalIndicator/v1": "5aaf92ecc24fdc25ed2fc8cf817edb5509ddbecb6475905c05cec175cd71e924"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 28,
                  "charOffset": 9822,
                  "charLength": 16,
                  "snippet": {
                    "text": "listOfOrdersMaps"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 9793,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n\n    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b9c4d387b80ad71e",
            "equalIndicator/v1": "5b914b27a4c33de1c997ede8f63a1a05b97b35e5ca9f3d0d98409249831f5729"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 27,
                  "charOffset": 519,
                  "charLength": 11,
                  "snippet": {
                    "text": "orderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 427,
                  "charLength": 171,
                  "snippet": {
                    "text": "            self.exceptionHandler(e, \" error on cancelling all\")\n\n    def cancelOrder(self, orderObject):\n        if not isinstance(orderObject, Order):\n            return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e4f25694ab51553",
            "equalIndicator/v1": "5d14f41d4f252246d7f99db1bd88e1f196588c052ba65886c020437131b02704"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "charOffset": 932,
                  "charLength": 8,
                  "snippet": {
                    "text": "newQuote"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 265,
                  "snippet": {
                    "text": "        if not (isinstance(clientDERIBIT, DERIBITClassClient)): return\n        # get data and sort it and return none is the data is the same as before\n        newQuote = self.sortData(self.deribitWebSocket.getListOfData())\n\n        if newQuote == None: return None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "728687899f19e841",
            "equalIndicator/v1": "5daafe5935816664ee4d16e42267014733cd62e8cbfcfe3ac663fe5144fc6453"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 9,
                  "charOffset": 10801,
                  "charLength": 11,
                  "snippet": {
                    "text": "customOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 244,
                  "startColumn": 1,
                  "charOffset": 10734,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n    def createACustomOrderObject(self, orderList, order):\n        customOrder = Order()\n        if order == None:\n            return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e1cd6ef751b5b05",
            "equalIndicator/v1": "601e7ddf17e89ed1dca6066cd257c50acb5e06f5fd565db859ebfcc0b0791309"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1447,
                  "charLength": 9,
                  "snippet": {
                    "text": "sellOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1414,
                  "charLength": 160,
                  "snippet": {
                    "text": "            return None\n\n    def sellOrder(self, indiceName,size, price, reduce_only=False):\n        # try using bulk orders to create these orders\n        try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "622d560ebd423cdf",
            "equalIndicator/v1": "621f9b2da5a31a24bd151f6e5fb32bfb37760c4aaaf7b3b84f23da24a72f1c40"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 9,
                  "charOffset": 539,
                  "charLength": 7,
                  "snippet": {
                    "text": "tempMap"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 482,
                  "charLength": 150,
                  "snippet": {
                    "text": "        meanPriceFromQuotes = mapOfData[\"mean\"]\n\n        tempMap = {\"close\": meanPriceFromQuotes}\n        mapOfSignals = self.generateSignal(tempMap)\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f809293d69826a4c",
            "equalIndicator/v1": "64c54d98865d27403930a2a44bcb70a82ce45a39a73656ec8df47d1dfe5371af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 13,
                  "charOffset": 1814,
                  "charLength": 12,
                  "snippet": {
                    "text": "enteredPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1715,
                  "charLength": 209,
                  "snippet": {
                    "text": "        # exit as soon as you surpass average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n\n            if positionStatus['direction'] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f8ca7c93c54b158e",
            "equalIndicator/v1": "672917ddf2bdf7e7e97f8f820992cfbf313dc1f4db24e6ff7208fe0e6ab61d9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 53,
                  "charOffset": 4340,
                  "charLength": 13,
                  "snippet": {
                    "text": "typeDef=\"all\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4286,
                  "charLength": 105,
                  "snippet": {
                    "text": "\n\n    def cancelall(self, instrument=\"BTC-PERPETUAL\", typeDef=\"all\"):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e051e18c2f0a2485",
            "equalIndicator/v1": "6a30fcb5f076860ecc20d49ae81146ed2b7a19c1ab5e80ac5901fe0efae1ce79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 9,
                  "charOffset": 266,
                  "charLength": 13,
                  "snippet": {
                    "text": "deribitClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 193,
                  "charLength": 231,
                  "snippet": {
                    "text": "        # real\n        # url = \"wss://www.deribit.com/ws/api/v2\"\n        deribitClient = RestClient(key=\"1H37RfiB\", secret=\"uwzosu7y179KMaMw1W7wbI9I8DxfYjSq0mfLnbbrPF8\",url=url)\n\n        return {\"deribit\": deribitClient, \"url\":url}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "08c9fcff56f68046",
            "equalIndicator/v1": "6bf81c49df3c6057e66fbcfb3d68c22bd2be7b6617feedc743a5775a7c870609"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "charOffset": 1011,
                  "charLength": 5,
                  "snippet": {
                    "text": "getId"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 949,
                  "charLength": 126,
                  "snippet": {
                    "text": "        return Decimal(self._lastOrder.get('price'))\n\n    def getId(self):\n        return str(self._lastOrder.get('orderId'))\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1451cc48e40d23f6",
            "equalIndicator/v1": "6c0c93d4b5923faee1e4136f5d4cd5775951458fe0bd4432d129aef99651d124"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 13,
                  "charOffset": 10104,
                  "charLength": 12,
                  "snippet": {
                    "text": "listOfOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 9924,
                  "charLength": 405,
                  "snippet": {
                    "text": "        # if it is false then we can deduce that there are no orders present, however if true we only work out what orders are still\n        if switchIfOrderIsPresent:\n            listOfOrders = listOfOrdersMaps[-1][\"sell\"] if listOfOrdersMaps[-1][\"sell\"] else listOfOrdersMaps[-1][\"buy\"]\n\n            outcome = self.orderManagementObject.orderStatus(listOfOrders=listOfOrders, instrument=self.indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "808c2f28777d7eba",
            "equalIndicator/v1": "6ce9c482f75a14eaf5a366f38fc20a81f0097cf8d9149828a18deed70c23c451"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 9,
                  "charOffset": 5714,
                  "charLength": 16,
                  "snippet": {
                    "text": "exitPositionSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 5480,
                  "charLength": 384,
                  "snippet": {
                    "text": "        intialStartSell = mapOfSignals[\"sell\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a sell signal and we are in a position and the position is a long and we have not made any orders to exit\n        exitPositionSell = mapOfExitSignals[\"sell\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"buy\" and (not self.exitingOrder)\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "909a92a16d80c337",
            "equalIndicator/v1": "6da4e38fcfeaa56ad82dac6cadcc91e536793a3138f18ecb6221a79ea0b68cdb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 17,
                  "charOffset": 8516,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 8355,
                  "charLength": 309,
                  "snippet": {
                    "text": "                # new functionality orders are scaled up but not exponentially\n                rateOfScalingOrders = self.rateOfChange * counter\n                newPrice = newPrice + (self.priceMovementUnit + rateOfScalingOrders)\n                # new functionality orders are scaled up but not exponentially\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c163616358b8d33f",
            "equalIndicator/v1": "6e00ed257548fa11b6bf3c5158ba056af798098ecec22eab5f8c42f3389da8ac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 30,
                  "charOffset": 4750,
                  "charLength": 14,
                  "snippet": {
                    "text": "mapOfDataPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    # this means we are always going to enter orders, as the signal is always true\n    def generateSignal(self, mapOfDataPrice):\n\n        buySignal = True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e9366e764e3a0681",
            "equalIndicator/v1": "768337c67cbd8f0d9b2ae0f6429afe1bfe69f4f20373d5e94c1d85d67bc8a566"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "charOffset": 526,
                  "charLength": 10,
                  "snippet": {
                    "text": "ifContains"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 486,
                  "charLength": 123,
                  "snippet": {
                    "text": "        return self._lastOrder\n\n    def ifContains(self, item):\n        if item in self._lastOrder:\n            return True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9e92658b6fcc81fd",
            "equalIndicator/v1": "76c9b92f36b8a7b6c592605a73a6c9204db072cdf3c6ca6d835e3e4a54c6a378"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 9,
                  "charOffset": 8796,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 8712,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize\n        numberOrders = int(abs(orderStatus[\"size\"])/newSize)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1d728d579012ba3b",
            "equalIndicator/v1": "792d2f9ada39134c21d70ddb5fe1cdc2b9bdf1824babc9d5ff6aa546ef533ff7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "charOffset": 263,
                  "charLength": 22,
                  "snippet": {
                    "text": "findOurCurrentPosition"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "charOffset": 203,
                  "charLength": 194,
                  "snippet": {
                    "text": "        self._clientDERIBIT = clientMap[\"deribit\"]\n\n    def findOurCurrentPosition(self):\n        try:\n            #result = self._clientDERIBIT.getorderbook(instrument=self.indiceName, depth=5)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bd0a6c699fca064a",
            "equalIndicator/v1": "7a399ece0daae6b60cdb6aecec3ee51ce43eac03b8c217dfba75e6f7de3d87e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "charOffset": 2202,
                  "charLength": 21,
                  "snippet": {
                    "text": "currentPositionStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2151,
                  "charLength": 281,
                  "snippet": {
                    "text": "\n            # here check our position\n            currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n            if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n            self.emptyPosition = currentPositionStatus == None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "67b9cbfac538cbec",
            "equalIndicator/v1": "7be12224e737dde3266c7a44df535ba6f57c6d47dc5743d98d83578126d407ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 21,
                  "charOffset": 1211,
                  "charLength": 11,
                  "snippet": {
                    "text": "signalToBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 1059,
                  "charLength": 350,
                  "snippet": {
                    "text": "                if meanPriceFromQuotes > (enteredPrice):\n                    # print(\"price is too high turn signalToBuy to false\")\n                    signalToBuy = False\n            # long - if the price we entered is larger then what we want to exit with then stop - we want sell high buy low\n            elif positionStatus['direction'] == \"buy\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "236ae9b50fc426c4",
            "equalIndicator/v1": "7f2ab3c9989370db080578fd91820b0f0f44f8db332d53bfa2430cfcfccc529b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 13,
                  "charOffset": 516,
                  "charLength": 15,
                  "snippet": {
                    "text": "currentPosition"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 306,
                  "charLength": 341,
                  "snippet": {
                    "text": "            #result = self._clientDERIBIT.getorderbook(instrument=self.indiceName, depth=5)\n            #result = self._clientDERIBIT.getinstruments(currency=\"BTC\", doesExpire=False, kind=\"future\")\n            currentPosition = self._clientDERIBIT.position(self.indiceName)\n            if currentPosition == None:\n                return None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "79279bffb46ec306",
            "equalIndicator/v1": "7feb7815c970daf16dcd80a9d035e4b26f04cb9e0d4523d4be7fc79a96b286f8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "charOffset": 509,
                  "charLength": 11,
                  "snippet": {
                    "text": "startSocket"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 477,
                  "charLength": 106,
                  "snippet": {
                    "text": "        self.url = url\n\n    def startSocket(self):\n        # try again after a failure\n        while True:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "89cf6715192aed55",
            "equalIndicator/v1": "85aa56bcfc9952b26be94afbdedade8aa8a6aa94aeccf820e534879c17bc87f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 17,
                  "charOffset": 11272,
                  "charLength": 11,
                  "snippet": {
                    "text": "orderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 11153,
                  "charLength": 264,
                  "snippet": {
                    "text": "            if order[\"amount\"] == (self.exitingSize):\n                # takes in a custom order object\n                orderObject = Order()\n                orderObject.setOrder(order)\n                self.orderManagementObject.cancelOrder(orderObject=orderObject)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ea7d8f1e1cf472cb",
            "equalIndicator/v1": "87c1664a01eae0a80b9d517acd85d21dcf5d1504780d566b66a261c8188d329d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 39,
                  "charOffset": 1418,
                  "charLength": 24,
                  "snippet": {
                    "text": "positionManagementObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 165,
                  "snippet": {
                    "text": "\n\n    def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):\n\n        if not isinstance(orderManagementObject, OrderManagement): return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7bfb759fb8c9daa4",
            "equalIndicator/v1": "8b749029fb2fb33801ac93349887e0a3b5a9fb55fd29485fd5a3e4d6847f14a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "charOffset": 9803,
                  "charLength": 12,
                  "snippet": {
                    "text": "orderPresent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 9793,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n\n    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "797abbf492eb760b",
            "equalIndicator/v1": "8b74bda0fb9c074f7f1c53efd93d11315a10eb7ca4ab7e638b825628d6e1e4dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "charOffset": 4445,
                  "charLength": 37,
                  "snippet": {
                    "text": "findItemByLoopingThroughPresentOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 4303,
                  "charLength": 284,
                  "snippet": {
                    "text": "\n    # finds if we still have orders on the same side as the position as it could fill later on increase/decreasing our average price\n    def findItemByLoopingThroughPresentOrders(self, listOfOrders, side):\n        for order in listOfOrders:\n            if order[\"direction\"] == side:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "440298da2650233f",
            "equalIndicator/v1": "8bde56d943631aa0033c04415e2c9fd048bb9bf477956e37d97d38da24eb001c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "charOffset": 1837,
                  "charLength": 10,
                  "snippet": {
                    "text": "bestPrices"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1705,
                  "charLength": 381,
                  "snippet": {
                    "text": "            and (\"best_bid_price\" in mapOfData['params']['data'] and \"best_ask_price\" in mapOfData['params']['data']):\n\n            bestPrices = {\"bid\": Decimal(mapOfData['params']['data']['best_bid_price']),\n                          \"ask\": Decimal(mapOfData['params']['data']['best_ask_price'])}\n            bestPrices[\"mean\"] = (bestPrices[\"bid\"] + bestPrices[\"ask\"])/Decimal(2)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a1a04c7d19a4748a",
            "equalIndicator/v1": "8d0335e580d9576dd02d123652c647e489c6212a56da771c552f1cb6f9986514"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "charOffset": 3289,
                  "charLength": 13,
                  "snippet": {
                    "text": "getOpenOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3279,
                  "charLength": 80,
                  "snippet": {
                    "text": "\n\n    def getOpenOrders(self, indiceName):\n        while(True):\n            try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ad682d2f37ad7fd",
            "equalIndicator/v1": "8e23592d596791dead733c6953b87ef64bf7c7388a6fa21255e8c60da7303909"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "charOffset": 640,
                  "charLength": 11,
                  "snippet": {
                    "text": "setCoinSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 610,
                  "charLength": 94,
                  "snippet": {
                    "text": "        return False\n\n    def setCoinSize(self, size):\n        self._lastOrder['size'] = size\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "64e892bc7a013308",
            "equalIndicator/v1": "8f68091c163e2dd09cf8c0ab2b8136bb25e4d62df39f4f70eb0daba32a888fb9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 2084,
                  "charLength": 13,
                  "snippet": {
                    "text": "mapOfOutcomes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2050,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n        orderItem = None\n        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "850ead3ed84ad0cb",
            "equalIndicator/v1": "91752a13a1820fc9689838f387431d6a42f79493037b6dc3159da7a8fea2d392"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 17,
                  "charOffset": 7871,
                  "charLength": 19,
                  "snippet": {
                    "text": "rateOfScalingOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 7674,
                  "charLength": 409,
                  "snippet": {
                    "text": "                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially\n                rateOfScalingOrders = self.rateOfChange * counter\n                newPrice= newPrice - (self.priceMovementUnit + rateOfScalingOrders)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8d5ef18973f457a8",
            "equalIndicator/v1": "926e19125b825b221842b3f812a63d39f4a6694d47b85495354ae088b5b86c27"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 9,
                  "charOffset": 5002,
                  "charLength": 14,
                  "snippet": {
                    "text": "intialStartBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4889,
                  "charLength": 484,
                  "snippet": {
                    "text": "\n        # if we find a buy signal and we are not in a position and we have not made any orders to enter\n        intialStartBuy = mapOfSignals[\"buy\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a buy signal and we are in a position and the position is a short and we have not made any orders to exit\n        exitPositionBuy = mapOfExitSignals[\"buy\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"sell\" and (not self.exitingOrder)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "41ebca9811df05a7",
            "equalIndicator/v1": "944f1424825201aeb06d150a0f0dcd451b58d4a35114d557ce46f1ad4829f70b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 17,
                  "charOffset": 9396,
                  "charLength": 18,
                  "snippet": {
                    "text": "deribitOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 9286,
                  "charLength": 399,
                  "snippet": {
                    "text": "                newPrice = newPrice - self.differenceInPrice\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size=newSize, price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # newPrice += self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "df120d8728167ac7",
            "equalIndicator/v1": "94ac268268f439c60d748ef3101f378e21d61f316eb53d6e99409b82688872f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "charOffset": 1836,
                  "charLength": 17,
                  "snippet": {
                    "text": "mapOfOutcomesExit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1766,
                  "charLength": 207,
                  "snippet": {
                    "text": "        '''\n        # check if orders are present for exiting\n        mapOfOutcomesExit = self.orderPresent(listOfOrdersMaps=self.listOfMapOfOrdersExit, switchIfOrderIsPresent=self.exitingOrder)\n\n        '''"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f805224eeb3dbbe0",
            "equalIndicator/v1": "96b47b2de3427568a92de658831244dbdc43410b9a59a1a721fec2adbfcbad66"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 9,
                  "charOffset": 1576,
                  "charLength": 10,
                  "snippet": {
                    "text": "bestPrices"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1532,
                  "charLength": 98,
                  "snippet": {
                    "text": "    def sortData(self, mapOfData):\n\n        bestPrices = None\n\n        if (mapOfData != None) and\\"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "79728efc03bfba43",
            "equalIndicator/v1": "97a8c228ab6c6523c600fecbfdde37ece7f4629b9e566ada932d3f0ff4801d9e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 19,
                  "charOffset": 715,
                  "charLength": 9,
                  "snippet": {
                    "text": "clientMap"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 665,
                  "charLength": 177,
                  "snippet": {
                    "text": "        self.APIThread.start()\n\n    def run(self, clientMap):\n        clientDERIBIT = clientMap[\"deribit\"]\n        if not (isinstance(clientDERIBIT, DERIBITClassClient)): return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "37e01749d6d170c4",
            "equalIndicator/v1": "97f18f8bf2c68a0eb3129979e941a78d5cb70ebf9d2e589ec239a4b1d849a276"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "charOffset": 685,
                  "charLength": 11,
                  "snippet": {
                    "text": "signalToBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 632,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n        signalToSell = mapOfSignals[\"sell\"]\n        signalToBuy = mapOfSignals[\"buy\"]\n\n        #  stop exit if order is below average price"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "577be5c6fe06f118",
            "equalIndicator/v1": "998b588b1b531608870dfef84977bb8e99e52c664030396f74159936836e342d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "charOffset": 2361,
                  "charLength": 12,
                  "snippet": {
                    "text": "enteredPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2313,
                  "charLength": 180,
                  "snippet": {
                    "text": "        if positionStatus != None:\n\n            enteredPrice = Decimal(positionStatus['average_price'])\n            # shorting\n            if positionStatus['direction'] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ce670c217ba52a02",
            "equalIndicator/v1": "9acac5b3a8d764f4923a5858ad3c201a3a3432d6a5093539880697f9d1a4bbcc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 9,
                  "charOffset": 5488,
                  "charLength": 15,
                  "snippet": {
                    "text": "intialStartSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 5374,
                  "charLength": 488,
                  "snippet": {
                    "text": "\n        # if we find a sell signal and we are not in a position and we have not made any orders to enter\n        intialStartSell = mapOfSignals[\"sell\"] and self.emptyPosition and (not self.enteringOrder)\n        # if we find a sell signal and we are in a position and the position is a long and we have not made any orders to exit\n        exitPositionSell = mapOfExitSignals[\"sell\"] and (not self.emptyPosition) and currentPositionStatus[\"direction\"] == \"buy\" and (not self.exitingOrder)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4568c6df3b0e54c7",
            "equalIndicator/v1": "9d45da4da3aebd86761163db820910f02319b3ebe13b02124f34e790c065b46f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 9,
                  "charOffset": 3338,
                  "charLength": 16,
                  "snippet": {
                    "text": "mapOfExitSignals"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3270,
                  "charLength": 142,
                  "snippet": {
                    "text": "        self.emptyPosition = currentPositionStatus == None\n\n        mapOfExitSignals = {\n            \"buy\" : False,\n            \"sell\" : False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "83020ed8cbc1d24c",
            "equalIndicator/v1": "a41ce276c92f353bc33218c9f69302d7d85ad80f7f059862ac9472abf1c3288a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 45,
                  "charOffset": 8757,
                  "charLength": 11,
                  "snippet": {
                    "text": "orderStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 8711,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\n    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dde1bc6bc0c3c144",
            "equalIndicator/v1": "a58606c7449bd67024be1534006b87e972cd2024f983d15b4fb1d7741ae5ccf6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 17,
                  "charOffset": 7560,
                  "charLength": 18,
                  "snippet": {
                    "text": "deribitOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 7456,
                  "charLength": 398,
                  "snippet": {
                    "text": "        for counter in range(self.numberOfScalingOrders):\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size= newSize ,price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fe69febf6fedeedc",
            "equalIndicator/v1": "a73ac81827c2eafa81eab438e495198d17779491a25c39005da0e813f7f9cb42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 63,
                  "charOffset": 3692,
                  "charLength": 21,
                  "snippet": {
                    "text": "orderManagementObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3526,
                  "charLength": 311,
                  "snippet": {
                    "text": "\n    # checks if orders are present on our current position thus moving the average price in our favour\n    def checkIfAnyOrdersAreStillPresent(self, positionStatus, orderManagementObject):\n        listOfPresentOrders = orderManagementObject.getOpenOrders(indiceName=\"BTC-PERPETUAL\")\n        # no orders present"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7d4dacc58e2b79e7",
            "equalIndicator/v1": "a83ee04468ffac95aecb70bee82660d6a719e84c200ca60fc7ac4ccf611bf703"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 17,
                  "charOffset": 9302,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 214,
                  "startColumn": 1,
                  "charOffset": 9131,
                  "charLength": 398,
                  "snippet": {
                    "text": "                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # newPrice -= self.differenceInPrice\n                newPrice = newPrice - self.differenceInPrice\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size=newSize, price=newPrice, reduce_only=True)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "63f2b2de8618340b",
            "equalIndicator/v1": "a91222025f474652a61b0ea96ca88d03f025cb02f8f0d8bb532a56cceeab69b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 9,
                  "charOffset": 860,
                  "charLength": 7,
                  "snippet": {
                    "text": "setSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 795,
                  "charLength": 129,
                  "snippet": {
                    "text": "        return Decimal(self._lastOrder.get('quantity'))\n\n    def setSize(self, size):\n        self._lastOrder[\"quantity\"] = size\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2d21e01e4afc50fa",
            "equalIndicator/v1": "adce91459351d0c0936459ce557cfed571dc6558b269a17050aaaec74e5bbc70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 49,
                  "charOffset": 3444,
                  "charLength": 13,
                  "snippet": {
                    "text": "postOnly=None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3351,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n    # quantities are done in multiple of 10\n    def sell(self, instrument, quantity, price, postOnly=None, reduce_only=None, hidden=None, label=None):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "469390c725d02c4b",
            "equalIndicator/v1": "ade3e0c92eb225b8a4ee2b04e6bf7110da0b3c35e3f5eb564cdd8b44547ddd8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 21,
                  "charOffset": 2002,
                  "charLength": 11,
                  "snippet": {
                    "text": "signalToBuy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1871,
                  "charLength": 205,
                  "snippet": {
                    "text": "            if positionStatus['direction'] == \"sell\":\n                if meanPriceFromQuotes < (enteredPrice):\n                    signalToBuy = True\n\n            elif positionStatus['direction'] == \"buy\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cd4f2923cb67f1c9",
            "equalIndicator/v1": "aeb03560e43ca9258c0d8326a5a3c0f0a34ddc14fd38a351a5f78e8921f538fc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "charOffset": 1055,
                  "charLength": 7,
                  "snippet": {
                    "text": "mapData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 956,
                  "charLength": 227,
                  "snippet": {
                    "text": "            try:\n                # puts all the incoming data into a list of a map\n                mapData = json.loads(self.ws.recv())\n                self.listOfNotifications.append(mapData)\n            except Exception as e:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "80f0abef79fc8461",
            "equalIndicator/v1": "b1278c6e57a8cf46bd20850ccae8f883f4b53e20f9845d1cacc32b647a8a5824"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 9,
                  "charOffset": 8821,
                  "charLength": 7,
                  "snippet": {
                    "text": "newSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 8713,
                  "charLength": 196,
                  "snippet": {
                    "text": "    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize\n        numberOrders = int(abs(orderStatus[\"size\"])/newSize)\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8e90696a703935de",
            "equalIndicator/v1": "b2b6195cab7011a7c4acbcb4d6392c02acf9eb8f93f45db1646cf14d46291426"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "charOffset": 7415,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 7190,
                  "charLength": 265,
                  "snippet": {
                    "text": "    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price\n        newSize = size\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "953b0c0029d8bb54",
            "equalIndicator/v1": "b2d9c373cbccf6e8401d139c26ddc1aaff6efa0edf7487171ab46c3891dd3978"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 9,
                  "charOffset": 1402,
                  "charLength": 10,
                  "snippet": {
                    "text": "errorFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1392,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n\n    def errorFound(self,e):\n        print(str(e) + \" -+waiting for data so sleeping for 15s\")\n        time.sleep(15)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6b0543091c66b94b",
            "equalIndicator/v1": "b53a07759b393380cc1d1c8326641243c3e3fb09e1b304203d4c290c10909795"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "charOffset": 4801,
                  "charLength": 10,
                  "snippet": {
                    "text": "sellSignal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 4767,
                  "charLength": 106,
                  "snippet": {
                    "text": "\n        buySignal = True\n        sellSignal = True\n\n        return {\"sell\": sellSignal, \"buy\": buySignal}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "815a5eec88e47bff",
            "equalIndicator/v1": "b62fb8064b189778a3bb16e942064ec5f6cbe79cc93320a87b3e315b29dc086d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "charOffset": 9702,
                  "charLength": 8,
                  "snippet": {
                    "text": "newPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 9530,
                  "charLength": 218,
                  "snippet": {
                    "text": "                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # newPrice += self.differenceInPrice\n                newPrice = newPrice + self.differenceInPrice\n\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9a2d2ec1771744d8",
            "equalIndicator/v1": "b634c9fa32a396d3ccf352ae89cb8227ea56155c68a7dbe507ba37115a93ef46"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 46,
                  "charOffset": 9840,
                  "charLength": 22,
                  "snippet": {
                    "text": "switchIfOrderIsPresent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 9793,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n\n    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b28aede1e63999e6",
            "equalIndicator/v1": "b64292cc4bb50d3e145cf90f1b2c7b72b4fc1b4e2e2986897673706fb8458825"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "charOffset": 191,
                  "charLength": 9,
                  "snippet": {
                    "text": "clientMap"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 5,
                  "startColumn": 1,
                  "charOffset": 123,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self.indiceName = \"BTC-PERPETUAL\"\n\n    def setClients(self, clientMap):\n        self._clientDERIBIT = clientMap[\"deribit\"]\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1b397ec9a8b4c35b",
            "equalIndicator/v1": "b688d8416ad40aaa91f5fc2a8d03041eec3d5daa6e77bf796fc831818e4004e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "charOffset": 9001,
                  "charLength": 18,
                  "snippet": {
                    "text": "deribitOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 8954,
                  "charLength": 331,
                  "snippet": {
                    "text": "\n            if side == \"buy\":\n                deribitOrderObject=self.orderManagementObject.buyOrder(indiceName=self.indiceName, size=newSize,price=newPrice, reduce_only=True)\n                self.createACustomOrderObject(orderList=self.orders[\"buy\"], order=deribitOrderObject)\n                # newPrice -= self.differenceInPrice"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99d658f4e2e21bcf",
            "equalIndicator/v1": "b839b1b7d2176172a050ba36c89dc664050d7e8ec69313d78db4abefb52bc998"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 46,
                  "charOffset": 378,
                  "charLength": 21,
                  "snippet": {
                    "text": "orderManagementObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 331,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    def run(self, mapOfData, positionStatus, orderManagementObject):\n        # changed it from the close price of previous trades to the best quotes\n        meanPriceFromQuotes = mapOfData[\"mean\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b9c1f33e45e53d7f",
            "equalIndicator/v1": "b896aa94303a6168658dd23ab5990b0b51d3a95cceece0e68ae4ab00e0be7288"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 24,
                  "charOffset": 184,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 130,
                  "charLength": 142,
                  "snippet": {
                    "text": "        self._oldOrder = None\n\n    def setOrder(self, lastOrder):\n        self._oldOrder = self._lastOrder\n        self._lastOrder = lastOrder"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f28fc994cfa721dd",
            "equalIndicator/v1": "b8a88c90d851f25380e03a948597a3ac91efe1461979a6784d62aeb48c260610"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 9,
                  "charOffset": 8721,
                  "charLength": 16,
                  "snippet": {
                    "text": "exitOrderScaling"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 8711,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\n    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3c0ac1c050a8a081",
            "equalIndicator/v1": "ba5bba7db4c1a020be62c91dcbf3aff3245204de92361be9cf6f859eacbdd0c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 21,
                  "charOffset": 2154,
                  "charLength": 12,
                  "snippet": {
                    "text": "signalToSell"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2022,
                  "charLength": 204,
                  "snippet": {
                    "text": "            elif positionStatus['direction'] == \"buy\":\n                if meanPriceFromQuotes > (enteredPrice):\n                    signalToSell = True\n        # exit as soon as you surpass average price\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e7a65842f49cc8a9",
            "equalIndicator/v1": "bb2ba4f0382758d38c35a05d094d58ddfa925fe22a81bdd5c31a579d60b8bac8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 30,
                  "charOffset": 362,
                  "charLength": 14,
                  "snippet": {
                    "text": "positionStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 331,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\n    def run(self, mapOfData, positionStatus, orderManagementObject):\n        # changed it from the close price of previous trades to the best quotes\n        meanPriceFromQuotes = mapOfData[\"mean\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "09f52b6798420d36",
            "equalIndicator/v1": "bc60bf93d4df82d8dd182946a59c53fd2a6baf744930da022429eac859335470"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 9,
                  "charOffset": 1647,
                  "charLength": 13,
                  "snippet": {
                    "text": "getListOfData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1612,
                  "charLength": 170,
                  "snippet": {
                    "text": "        self.disconnect()\n\n    def getListOfData(self):\n        if len(self.listOfNotifications) > 1:\n            self.listOfNotifications = self.listOfNotifications[-2:]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ff6fc34cb6af694a",
            "equalIndicator/v1": "c2d2a74182b3b1f2c3c4dc81a2c7aed2259069579bef8bac0ea48a37dccb2de1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 25,
                  "charOffset": 1404,
                  "charLength": 12,
                  "snippet": {
                    "text": "mapOfSignals"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 165,
                  "snippet": {
                    "text": "\n\n    def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):\n\n        if not isinstance(orderManagementObject, OrderManagement): return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "89b87f675dda92b0",
            "equalIndicator/v1": "c612ced802ba370ae445901f43d40dc3d892906461d66208cd1ab4657993ff0f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 1555,
                  "charLength": 9,
                  "snippet": {
                    "text": "mapOfData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1511,
                  "charLength": 82,
                  "snippet": {
                    "text": "        return None\n\n    def sortData(self, mapOfData):\n\n        bestPrices = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "518c13714b80991b",
            "equalIndicator/v1": "c66b343e06ca0acf1468d24b6ae653c5e02bc1319a342223522781b0fbac3d62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 9,
                  "charOffset": 588,
                  "charLength": 12,
                  "snippet": {
                    "text": "mapOfSignals"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 530,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n        tempMap = {\"close\": meanPriceFromQuotes}\n        mapOfSignals = self.generateSignal(tempMap)\n\n        signalToSell = mapOfSignals[\"sell\"]"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a005ca06e15f680f",
            "equalIndicator/v1": "c6e68a63edd6b9a388516991c730707f653a1b3c89facb9cb2f370b19adbb46f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "charOffset": 1543,
                  "charLength": 19,
                  "snippet": {
                    "text": "endSocketDueToError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1493,
                  "charLength": 144,
                  "snippet": {
                    "text": "    # send the data to the logicalEngine\n\n    def endSocketDueToError(self, e):\n        print(e, \" closing websocket\")\n        self.disconnect()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44df2295f2b53245",
            "equalIndicator/v1": "c980a9fa2544a4c6a13bc8b38c6c9fd1e9e642510eb0a0b145e0aa450bb4a6a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 13,
                  "charOffset": 1369,
                  "charLength": 12,
                  "snippet": {
                    "text": "mapOfSignals"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1302,
                  "charLength": 270,
                  "snippet": {
                    "text": "            self.orderManagementObject.run(clientMap)\n\n            mapOfSignals = self.generateSignalObject.run(data,positionStatus, self.orderManagementObject)\n\n            self.algorithm.run(data,mapOfSignals, self.positionManagementObject, self.orderManagementObject)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d340f66fbf91f70",
            "equalIndicator/v1": "c9f3704842ab10f97b3c5797cc8f1b08c132c9d5f07ed375a0a456cdbb44b7f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "charOffset": 1540,
                  "charLength": 8,
                  "snippet": {
                    "text": "sortData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1511,
                  "charLength": 82,
                  "snippet": {
                    "text": "        return None\n\n    def sortData(self, mapOfData):\n\n        bestPrices = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a3c41fc5dccdc4b3",
            "equalIndicator/v1": "ccf9a03546a4ccecca61dfd8388be3f1d0f614f3aac9f4eeacb10132a18ce6e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 47,
                  "charOffset": 3676,
                  "charLength": 14,
                  "snippet": {
                    "text": "positionStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3526,
                  "charLength": 311,
                  "snippet": {
                    "text": "\n    # checks if orders are present on our current position thus moving the average price in our favour\n    def checkIfAnyOrdersAreStillPresent(self, positionStatus, orderManagementObject):\n        listOfPresentOrders = orderManagementObject.getOpenOrders(indiceName=\"BTC-PERPETUAL\")\n        # no orders present"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b44f9a5400ca50f7",
            "equalIndicator/v1": "cd38e580a80019f1a3af164f2fe0c3036c1dbfd3144e912517e35516a2bd0d1d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "charOffset": 2005,
                  "charLength": 11,
                  "snippet": {
                    "text": "orderStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1972,
                  "charLength": 103,
                  "snippet": {
                    "text": "            return None\n\n    def orderStatus(self, listOfOrders, instrument):\n\n        orderItem = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "df6eb99cecdfe8fe",
            "equalIndicator/v1": "ce8001cc8597d3231d6d59f0872e0325c0f28245496c436634b6803710840bcc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 13,
                  "charOffset": 10599,
                  "charLength": 11,
                  "snippet": {
                    "text": "mapOfStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 10489,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n            # assume that cancelled and fullyFilled will be True and that works for what we have\n            mapOfStatus = {\"open\": False, \"fullyFilled\": True}\n            return mapOfStatus\n        return {\"open\": False, \"fullyFilled\":False}"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "81e625050aca23a1",
            "equalIndicator/v1": "cf86aefb1b616b73254f35756a44830cfa440923c9c7fea55bdfbd39825afa31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 58,
                  "charOffset": 8770,
                  "charLength": 15,
                  "snippet": {
                    "text": "listOfMapOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 8711,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\n    def exitOrderScaling(self, side, price, orderStatus, listOfMapOrders):\n        newPrice = price\n        newSize = self.exitingSize"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f9ba6edbfa804d7",
            "equalIndicator/v1": "d625e1589a290ad025aefad1d322620408409be49f9eeb893b5b2c64c0ee2c66"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 27,
                  "charOffset": 2023,
                  "charLength": 12,
                  "snippet": {
                    "text": "listOfOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1972,
                  "charLength": 103,
                  "snippet": {
                    "text": "            return None\n\n    def orderStatus(self, listOfOrders, instrument):\n\n        orderItem = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "085915ede674a894",
            "equalIndicator/v1": "d6bd6f1eb29c224262ec712b4d350188beb2d8ece7c7358c5cb98054a99ee4d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "charOffset": 8134,
                  "charLength": 18,
                  "snippet": {
                    "text": "deribitOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 8084,
                  "charLength": 349,
                  "snippet": {
                    "text": "\n            elif side == \"sell\":\n                deribitOrderObject = self.orderManagementObject.sellOrder(indiceName=self.indiceName, size= newSize , price=newPrice)\n                self.createACustomOrderObject(orderList=self.orders[\"sell\"], order=deribitOrderObject)\n                # new functionality orders are scaled up but not exponentially"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "77e599e431148882",
            "equalIndicator/v1": "dc61493d3ab3b621e2e35b36b433d86d4ccd92ca1642e0492f5f4eba133aa05d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "charOffset": 2259,
                  "charLength": 12,
                  "snippet": {
                    "text": "orderMapList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2205,
                  "charLength": 206,
                  "snippet": {
                    "text": "        while(True):\n            try:\n                orderMapList = self._clientDERIBIT.getopenorders(instrument=instrument)\n                # orders from Deribit\n                for order in orderMapList:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "87002c0184cd5ecb",
            "equalIndicator/v1": "dcc52ac1ab11ec194d932b49743518ebfafc1bde51e73ac99f4970beb729c154"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "charOffset": 1463,
                  "charLength": 10,
                  "snippet": {
                    "text": "indiceName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1414,
                  "charLength": 160,
                  "snippet": {
                    "text": "            return None\n\n    def sellOrder(self, indiceName,size, price, reduce_only=False):\n        # try using bulk orders to create these orders\n        try:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "524481d391d97259",
            "equalIndicator/v1": "e0751e73cf66ede29e5c2e138b961db1d02d57f78568c88f8167c57200b35d36"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 9,
                  "charOffset": 11648,
                  "charLength": 10,
                  "snippet": {
                    "text": "exitClause"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 11638,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n\n    def exitClause(self):\n        self.numberOfTradeCycles += 1\n        if self.numberOfTradeCycles >= self.numberOfTradeCyclesLimit:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9c28b81e6d7f1e5b",
            "equalIndicator/v1": "e1b2b4e5520dfa5cecba227a9a11bad94bb6dbf24452ef294884778513f7b662"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 9,
                  "charOffset": 11427,
                  "charLength": 28,
                  "snippet": {
                    "text": "removeAllOrdersAndResetFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 11338,
                  "charLength": 228,
                  "snippet": {
                    "text": "                self.orderManagementObject.cancelOrder(orderObject=orderObject)\n\n    def removeAllOrdersAndResetFlags(self):\n        self.orderManagementObject.cancelAll()\n        # as there are no orders so they can't be in one"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98467f42b6daa72d",
            "equalIndicator/v1": "e32ac1606c20f4b90496d69cda87c27e519edc736c1d1c3a26d3cfdbb5067216"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 9,
                  "charOffset": 1084,
                  "charLength": 7,
                  "snippet": {
                    "text": "getSide"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1024,
                  "charLength": 123,
                  "snippet": {
                    "text": "        return str(self._lastOrder.get('orderId'))\n\n    def getSide(self):\n        return self._lastOrder.get('direction')\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f91e1a185afceefb",
            "equalIndicator/v1": "e3c2315107837b4d3a1c4271ffe3e42a5677d47bf44a9e3b568c681759597090"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "charOffset": 820,
                  "charLength": 12,
                  "snippet": {
                    "text": "enteredPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 720,
                  "charLength": 338,
                  "snippet": {
                    "text": "        #  stop exit if order is below average price\n        if positionStatus != None:\n            enteredPrice = Decimal(positionStatus['average_price'])\n            # shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low\n            if positionStatus['direction'] == \"sell\":"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a012fb8dddd97a15",
            "equalIndicator/v1": "e65c858e7c1e886a0a734af8517a0df0b497bbbac34e850bb8e82bf2bcb4362e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "charOffset": 780,
                  "charLength": 7,
                  "snippet": {
                    "text": "getSize"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 732,
                  "charLength": 119,
                  "snippet": {
                    "text": "        return self._lastOrder['size']\n\n    def getSize(self):\n        return Decimal(self._lastOrder.get('quantity'))\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3019e1769d6c55e0",
            "equalIndicator/v1": "e8062484bfeb5662d18c04e6b32819af84533aafcace0e7da7c83f0ca0eba14c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "charOffset": 1587,
                  "charLength": 15,
                  "snippet": {
                    "text": "lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1507,
                  "charLength": 354,
                  "snippet": {
                    "text": "        # try using bulk orders to create these orders\n        try:\n            lastOrderObject = self._clientDERIBIT.sell(instrument=indiceName, quantity=str(size),price=str(price), reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Sell order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7ebf7078c4e7ccd9",
            "equalIndicator/v1": "ec2150e206531ec754cc23bf5cacf10b41dd66e14fda3b09e5177a77caec2c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 22,
                  "charOffset": 4091,
                  "charLength": 7,
                  "snippet": {
                    "text": "orderId"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4068,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\n    def cancel(self, orderId):\n        msg = {}\n        params = {"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d4cef97936f48a0d",
            "equalIndicator/v1": "ed3455320c31bb3f6b6d634971500a99f36f491fc948a2a4bd92617367d1ad9a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 66,
                  "charOffset": 1445,
                  "charLength": 21,
                  "snippet": {
                    "text": "orderManagementObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1378,
                  "charLength": 165,
                  "snippet": {
                    "text": "\n\n    def run(self, data, mapOfSignals, positionManagementObject,  orderManagementObject):\n\n        if not isinstance(orderManagementObject, OrderManagement): return"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d1ae01e87a7dc5f3",
            "equalIndicator/v1": "edb29874cc7d39f769671e463cf84606ca80de5e46e924c3df88aa1e303a06d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "charOffset": 169,
                  "charLength": 8,
                  "snippet": {
                    "text": "setOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 130,
                  "charLength": 142,
                  "snippet": {
                    "text": "        self._oldOrder = None\n\n    def setOrder(self, lastOrder):\n        self._oldOrder = self._lastOrder\n        self._lastOrder = lastOrder"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f32cd16be508f7f0",
            "equalIndicator/v1": "ee23d393deae8328a5d6fa545e1ab60b8e4058db0140740992c6ec52901a9e54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "charOffset": 3106,
                  "charLength": 21,
                  "snippet": {
                    "text": "currentPositionStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 3060,
                  "charLength": 268,
                  "snippet": {
                    "text": "        Position checking\n        '''\n        currentPositionStatus = positionManagementObject.findOurCurrentPosition()\n        if (currentPositionStatus != None) and (\"error\" in currentPositionStatus): return\n        self.emptyPosition = currentPositionStatus == None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c9dc42671a2f698f",
            "equalIndicator/v1": "eec9cc43bd705cbf6bbe2e2b2139d6546919747bd7aafa4bc5c897b0d96a08d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 13,
                  "charOffset": 660,
                  "charLength": 20,
                  "snippet": {
                    "text": "orderObjectCancelled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 599,
                  "charLength": 225,
                  "snippet": {
                    "text": "        orderObjectCancelled = None\n        try:\n            orderObjectCancelled = self._clientDERIBIT.cancel(orderObject.getId())\n            print(\"cancel order \" + str(orderObjectCancelled))\n        except Exception as e:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "af6e71c5d6f3f347",
            "equalIndicator/v1": "ef6b36c638ae96ee3f33bb32359e31d13b600d3768a2897d6a6d851a92faf900"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 933,
                  "charLength": 8,
                  "snippet": {
                    "text": "getPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 881,
                  "charLength": 121,
                  "snippet": {
                    "text": "        self._lastOrder[\"quantity\"] = size\n\n    def getPrice(self):\n        return Decimal(self._lastOrder.get('price'))\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bf538c2e0d5a4c91",
            "equalIndicator/v1": "f1697442e67185da5fd54d6932dea29f23dd6410948085f4b846cf8925f54cbc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 52,
                  "charOffset": 7389,
                  "charLength": 15,
                  "snippet": {
                    "text": "listOfMapOrders"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 7189,
                  "charLength": 265,
                  "snippet": {
                    "text": "\n    # -----------------------when entering an order we have times our sizes by 10 to increase the size but the price distribution is still the same\n    def enterOrderScaling(self, side, size, price, listOfMapOrders):\n        newPrice = price\n        newSize = size"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46aca74b57a1f481",
            "equalIndicator/v1": "f249a66bf368274ef5ba9d8c78590f77cdb22cbf89da16286d02c31720609238"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 17,
                  "charOffset": 10403,
                  "charLength": 11,
                  "snippet": {
                    "text": "mapOfStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 10214,
                  "charLength": 275,
                  "snippet": {
                    "text": "            outcome = self.orderManagementObject.orderStatus(listOfOrders=listOfOrders, instrument=self.indiceName)\n            if outcome[\"open\"] or outcome[\"partFilled\"]:\n                mapOfStatus = {\"open\": True, \"fullyFilled\": False}\n                return mapOfStatus\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b3759f32c0814b25",
            "equalIndicator/v1": "f5f7212f084198de44cad479103d97378d975622b2da7e3c560667fd062f184c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 24,
                  "charOffset": 963,
                  "charLength": 10,
                  "snippet": {
                    "text": "indiceName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 903,
                  "charLength": 117,
                  "snippet": {
                    "text": "        return orderObjectCancelled\n\n    def buyOrder(self, indiceName,size, price, reduce_only=False):\n        try:\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0ceaf729e81e68db",
            "equalIndicator/v1": "f8b641902bb91308dc2a2f81ab6dfee73cf6ab1a8a6079d81ddd7b114046eea3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "charOffset": 1033,
                  "charLength": 15,
                  "snippet": {
                    "text": "lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1007,
                  "charLength": 297,
                  "snippet": {
                    "text": "        try:\n\n            lastOrderObject = self._clientDERIBIT.buy(instrument=indiceName, quantity=str(size),price=str(price),reduce_only=reduce_only, postOnly=True, hidden=True, label=None)[\"order\"]\n            print(\"Buy order sent - \" + str(lastOrderObject))\n            return lastOrderObject"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44a146b0a38d86fd",
            "equalIndicator/v1": "f920fbe21b98699b01efc21d233ddb4bc0d8b2d7473f6699275691fc79680f63"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 9,
                  "charOffset": 240,
                  "charLength": 9,
                  "snippet": {
                    "text": "cancelAll"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 180,
                  "charLength": 142,
                  "snippet": {
                    "text": "        self._clientDERIBIT = clientMap[\"deribit\"]\n\n    def cancelAll(self):\n        try:\n            orders = self._clientDERIBIT.cancelall()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "79d12d1a65d66319",
            "equalIndicator/v1": "f98580b9bb7893babb9805aef1aa52db7af0c5ad0807cfc913c8bf0ae5b2cf4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 9,
                  "charOffset": 620,
                  "charLength": 9,
                  "snippet": {
                    "text": "clientMap"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 592,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n    def run(self):\n        clientMap = self.client.authenticate()\n        self.gatherDataObject.setting_url(clientMap)\n        self.positionManagementObject.setClients(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "523d8c5e02fb25ac",
            "equalIndicator/v1": "fa74ae33596099cd64f8004d7bea8ba46cf15fd8c99b1e45afe841f149d3cb70"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "charOffset": 735,
                  "charLength": 13,
                  "snippet": {
                    "text": "clientDERIBIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 696,
                  "charLength": 227,
                  "snippet": {
                    "text": "\n    def run(self, clientMap):\n        clientDERIBIT = clientMap[\"deribit\"]\n        if not (isinstance(clientDERIBIT, DERIBITClassClient)): return\n        # get data and sort it and return none is the data is the same as before"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99203351bf85751e",
            "equalIndicator/v1": "fddd46a936b603bd834640e112ec7159d6bbab6f71475983f61e72df4ac2b4e8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "charOffset": 1232,
                  "charLength": 32,
                  "snippet": {
                    "text": "(temp == \"Buy\" or temp == \"buy\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1148,
                  "charLength": 143,
                  "snippet": {
                    "text": "    def isSideBuy(self):\n        temp = self._lastOrder[\"direction\"]\n        return (temp == \"Buy\" or temp == \"buy\")\n\n    def isSideSell(self):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c44e3714ec0eed5f",
            "equalIndicator/v1": "0be2a61fdc1feff4ced2b78094fac85dd4036a0973a1c6ddf12b72cc66d7422a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 23,
                  "charOffset": 260,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "charOffset": 236,
                  "charLength": 93,
                  "snippet": {
                    "text": "\n\nclass AlgorithmScaling():\n    def __init__(self):\n        self.counterSinceOrderWasMade = 0"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "699cc00e96049353",
            "equalIndicator/v1": "3a25999a96bdd4b1e3d1d01caeb7b5d3fe26007ebe1b552771138340a0b50c88"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 42,
                  "charOffset": 1100,
                  "charLength": 14,
                  "snippet": {
                    "text": "(enteredPrice)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 876,
                  "charLength": 354,
                  "snippet": {
                    "text": "            # shorting - if the price we entered is smaller then what we want to exit with then stop - we want sell high buy low\n            if positionStatus['direction'] == \"sell\":\n                if meanPriceFromQuotes > (enteredPrice):\n                    # print(\"price is too high turn signalToBuy to false\")\n                    signalToBuy = False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "075e392f59420a67",
            "equalIndicator/v1": "3e0901f106591ea4ba650f270362cb7efb9c56e389f2cffe6e71cd22f8857db9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gatherData.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 17,
                  "charOffset": 234,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "charOffset": 205,
                  "charLength": 103,
                  "snippet": {
                    "text": "import json\n\nclass GatherData():\n    def __init__(self):\n        self.deribitWebSocket = Deribitv2API()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "494342856c4a3f95",
            "equalIndicator/v1": "3f70a6b3f5603eb5dcf166f4a1975ea44e6eb8a59a08231922f29b056e4fb063"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 35,
                  "charOffset": 11187,
                  "charLength": 18,
                  "snippet": {
                    "text": "(self.exitingSize)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 11037,
                  "charLength": 256,
                  "snippet": {
                    "text": "        listOfOrders = self.orderManagementObject.getOpenOrders(self.indiceName)\n        for order in listOfOrders:\n            if order[\"amount\"] == (self.exitingSize):\n                # takes in a custom order object\n                orderObject = Order()"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "be288de45d102bd0",
            "equalIndicator/v1": "446b40fae805fc5b9790d78c6d40cd455d0b41519e3f244418789926fd293ff0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 42,
                  "charOffset": 2118,
                  "charLength": 14,
                  "snippet": {
                    "text": "(enteredPrice)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2021,
                  "charLength": 204,
                  "snippet": {
                    "text": "\n            elif positionStatus['direction'] == \"buy\":\n                if meanPriceFromQuotes > (enteredPrice):\n                    signalToSell = True\n        # exit as soon as you surpass average price"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1d4b4395e3b4fae2",
            "equalIndicator/v1": "4d8a82588661227ee9a8e4444ca3b3bc91da6e8109db7412006b93f0762b9cd0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 42,
                  "charOffset": 1966,
                  "charLength": 14,
                  "snippet": {
                    "text": "(enteredPrice)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1870,
                  "charLength": 151,
                  "snippet": {
                    "text": "\n            if positionStatus['direction'] == \"sell\":\n                if meanPriceFromQuotes < (enteredPrice):\n                    signalToBuy = True\n"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "91702a6a1721dcb5",
            "equalIndicator/v1": "5639ae2e42f11e26b091282d94be4b8371a81c958184ba7bc70170392b1d5cb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 22,
                  "charOffset": 86,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 36,
                  "charLength": 112,
                  "snippet": {
                    "text": "from decimal import Decimal\n\nclass OrderManagement():\n    def __init__(self):\n        self._clientDERIBIT = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6052f3457515c625",
            "equalIndicator/v1": "585f7f071f1aaa403794219135384447706478f2867b141d72f3c0d0848d1911"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 16,
                  "charOffset": 1351,
                  "charLength": 34,
                  "snippet": {
                    "text": "(temp == \"Sell\" or temp == \"sell\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1266,
                  "charLength": 147,
                  "snippet": {
                    "text": "    def isSideSell(self):\n        temp = self._lastOrder[\"direction\"]\n        return (temp == \"Sell\" or temp == \"sell\")\n\n    def isOrderNone(self):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "888a652e8a50f161",
            "equalIndicator/v1": "75e5d6f50ad81f2d3630ba568a51e13fb25507e6537f1f1fb4a09e45f047ccfc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "charOffset": 40,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 98,
                  "snippet": {
                    "text": "from decimal import Decimal\n\nclass Order():\n    def __init__(self):\n        self._lastOrder = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7e5af4daadb5a78d",
            "equalIndicator/v1": "80cd8fb093a889acb68697bd23ded040a87b1dc6cc1a6a16afc2cb9d5d2ede12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 42,
                  "charOffset": 1451,
                  "charLength": 14,
                  "snippet": {
                    "text": "(enteredPrice)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1231,
                  "charLength": 351,
                  "snippet": {
                    "text": "            # long - if the price we entered is larger then what we want to exit with then stop - we want sell high buy low\n            elif positionStatus['direction'] == \"buy\":\n                if meanPriceFromQuotes < (enteredPrice):\n                    # print(\"price is too low turn signalToSell to false\")\n                    signalToSell = False"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fa70ca076eb1cec2",
            "equalIndicator/v1": "80ecf72914d55d85b9cb3b00de88de8d29c530cbbadbf4a2dea064eed3f845cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "controller.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "charOffset": 824,
                  "charLength": 6,
                  "snippet": {
                    "text": "(True)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 212,
                  "snippet": {
                    "text": "        self.gatherDataObject.start()\n\n        while(True):\n            # modular objects, this way all objects are created externally and can be appened on\n            data = self.gatherDataObject.run(clientMap)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "19233a88e748555f",
            "equalIndicator/v1": "80fbb5285ceda9bbed713025688aa1df34d35a7a73fd2e60802bc0acea6e9256"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "order.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 12,
                  "charOffset": 312,
                  "charLength": 24,
                  "snippet": {
                    "text": "(self._oldOrder != None)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 273,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n    def getOldOrder(self):\n        if (self._oldOrder != None):\n            temp = Order()\n            temp.setOrder(self._oldOrder)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d27b1818602c1688",
            "equalIndicator/v1": "9e76ac24348a41668663da9261d7fe76569f7ea42d1eb2f90f7b8171d46274ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 14,
                  "charOffset": 3335,
                  "charLength": 6,
                  "snippet": {
                    "text": "(True)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 3280,
                  "charLength": 161,
                  "snippet": {
                    "text": "\n    def getOpenOrders(self, indiceName):\n        while(True):\n            try:\n                orders = self._clientDERIBIT.getopenorders(instrument=indiceName)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "07ac763d7d23597a",
            "equalIndicator/v1": "a6d8b21e58eaaf92c7079e4353ebb8de80106f3dcadeb5aba43867ce97f6c6b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_V2_API_Websocket.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "charOffset": 119,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 88,
                  "charLength": 59,
                  "snippet": {
                    "text": "import time\n\nclass Deribitv2API():\n\n    def __init__(self):"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ebff377611ff32df",
            "equalIndicator/v1": "ab36981271b8fec80050f11bb8dff96f4cbf461c4b3bc085ac719dc567eed3a2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "orderManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 14,
                  "charOffset": 2218,
                  "charLength": 6,
                  "snippet": {
                    "text": "(True)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 2076,
                  "charLength": 254,
                  "snippet": {
                    "text": "        mapOfOutcomes = {\"open\":False ,\"cancelled\": False, \"fullyFilled\": False, \"partFilled\": False, \"orderStatus\": orderItem}\n\n        while(True):\n            try:\n                orderMapList = self._clientDERIBIT.getopenorders(instrument=instrument)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d821a3cd3d3a0e34",
            "equalIndicator/v1": "df93b42da475a43671b16d3a85935a2196147bb61a2a4909ea5c0bdba0ebd7b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 22,
                  "charOffset": 106,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 3,
                  "startColumn": 1,
                  "charOffset": 72,
                  "charLength": 128,
                  "snippet": {
                    "text": "import math\n\nclass GenerateSignals():\n    def __init__(self):\n        # it means that the list will hold upto 30 minutes of data"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "41c848170b6cf014",
            "equalIndicator/v1": "f358e4ea3f5cba38af86d1b200bf91562f78ee03aba3870cdf50ebe12f9c45c0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "positionManagement.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "charOffset": 24,
                  "charLength": 2,
                  "snippet": {
                    "text": "()"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 86,
                  "snippet": {
                    "text": "class PositionManagement():\n    def __init__(self):\n        self._clientDERIBIT = None"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3fafe3b3bd2f280d",
            "equalIndicator/v1": "fde035b17e88af064fbf988e47fcd28b5c2469028f3713af90d9d4903c2f77d0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'ws' might be referenced before assignment",
            "markdown": "Local variable 'ws' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 13,
                  "charOffset": 1381,
                  "charLength": 2,
                  "snippet": {
                    "text": "ws"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1355,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n        try:\n            ws.send(json.dumps(msg))\n            while ws.connected:\n                data = json.loads(ws.recv())"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "51f52c936c82040c",
            "equalIndicator/v1": "2ccce8a9f52bdee35a07de1d40863cc7eca9c37af0a59b307f638c33e6f69c6a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnreachableCodeInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This code is unreachable",
            "markdown": "This code is unreachable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 21,
                  "charOffset": 1610,
                  "charLength": 5,
                  "snippet": {
                    "text": "break"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1483,
                  "charLength": 201,
                  "snippet": {
                    "text": "                if \"error\" in data:\n                    raise ValueError(data , \"issue with loading api \")\n                    break\n                return data[\"result\"]\n        except Exception as e:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "05ea1849da35325e",
            "equalIndicator/v1": "7802e84772cb955d1387ebf07e2903bc5b4055f21f6c2d55b7c906f5a78b5e18"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'mapOfDataPrice' value is not used",
            "markdown": "Parameter 'mapOfDataPrice' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "generateSignals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 30,
                  "charOffset": 4750,
                  "charLength": 14,
                  "snippet": {
                    "text": "mapOfDataPrice"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n    # this means we are always going to enter orders, as the signal is always true\n    def generateSignal(self, mapOfDataPrice):\n\n        buySignal = True"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0dd4c95211493ce0",
            "equalIndicator/v1": "032318344401f07a9de31b68e623a45427175bc26e1fe9caf9394f7ce5dd3a10"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 9,
                  "charOffset": 4364,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 4287,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n    def cancelall(self, instrument=\"BTC-PERPETUAL\", typeDef=\"all\"):\n        msg = {}\n        params = {\n            \"type\": typeDef,"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "603f2969ddec6b7f",
            "equalIndicator/v1": "6622b923d4da09e837ad32c0e820986110bdaef38d999383ccf29a3eed3929d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'mapOfOutcomesEnter' value is not used",
            "markdown": "Local variable 'mapOfOutcomesEnter' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 9,
                  "charOffset": 2836,
                  "charLength": 18,
                  "snippet": {
                    "text": "mapOfOutcomesEnter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2765,
                  "charLength": 268,
                  "snippet": {
                    "text": "        '''\n        # check if orders are present for entering\n        mapOfOutcomesEnter = self.orderPresent(listOfOrdersMaps=self.listOfMapOfOrdersEnter, switchIfOrderIsPresent=self.enteringOrder)\n        '''\n        Order checking and editing above the if statement"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f1ec6d7ccbb7f89f",
            "equalIndicator/v1": "863100d2bc979f870889b36d2c03f42eef5e0c0f5510c6801f408aa6f499abb0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'auth_data' value is not used",
            "markdown": "Local variable 'auth_data' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deribit_api.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 9,
                  "charOffset": 789,
                  "charLength": 9,
                  "snippet": {
                    "text": "auth_data"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 752,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n    def request(self, msg):\n        auth_data = None\n        try:\n            ws = create_connection(self.url)"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3e70e854fb07cd98",
            "equalIndicator/v1": "cd9a511f1c21e2c0919cfb2d5c64610c5f713ea668b7deb761bcc19fcc68baea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'mapOfStatus' value is not used",
            "markdown": "Local variable 'mapOfStatus' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "algorithmScaling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "charOffset": 9874,
                  "charLength": 11,
                  "snippet": {
                    "text": "mapOfStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 9795,
                  "charLength": 296,
                  "snippet": {
                    "text": "    def orderPresent(self, listOfOrdersMaps, switchIfOrderIsPresent):\n\n        mapOfStatus = {\"open\": True, \"fullyFilled\": True}\n        # if it is false then we can deduce that there are no orders present, however if true we only work out what orders are still\n        if switchIfOrderIsPresent:"
                  },
                  "sourceLanguage": "Python"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "DERIBIT",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "56ef6f54341cb8dc",
            "equalIndicator/v1": "d8868435863a78a8ecbbb9a0905fbd39afdeda47d03f21c7a347caf15ed5a45f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "DERIBIT/qodana/2024-04-30",
        "guid": "c7f8f4d8-6b4f-4437-949a-ff63e4aaedfc",
        "properties": {
          "jobUrl": ""
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'ROUND_HALF_DOWN'",
              "markdown": "Unused import statement `ROUND_HALF_DOWN`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "gatherData.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 30,
                    "charOffset": 29,
                    "charLength": 15,
                    "snippet": {
                      "text": "ROUND_HALF_DOWN"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 68,
                    "snippet": {
                      "text": "from decimal import Decimal, ROUND_HALF_DOWN\nimport time\nimport math"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "56aab0cbd18a9a2e",
              "equalIndicator/v1": "08d22f2c797b311361f187d83a2f0a5726c122536a0048e09a427b1f857a16b8"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import time'",
              "markdown": "Unused import statement `import time`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "controller.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 7,
                    "startColumn": 1,
                    "charOffset": 246,
                    "charLength": 11,
                    "snippet": {
                      "text": "import time"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 5,
                    "startColumn": 1,
                    "charOffset": 172,
                    "charLength": 104,
                    "snippet": {
                      "text": "from clients import Clients\nfrom algorithmScaling import AlgorithmScaling\nimport time\n\nclass Controller:"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "9288d675123ae711",
              "equalIndicator/v1": "197672dfcbe4253cdb149f43327aaed718edeb0093319431c9ee65ab79dbbb17"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'from generateSignals import GenerateSignals'",
              "markdown": "Unused import statement `from generateSignals import GenerateSignals`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "algorithmScaling.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 2,
                    "startColumn": 1,
                    "charOffset": 34,
                    "charLength": 43,
                    "snippet": {
                      "text": "from generateSignals import GenerateSignals"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 171,
                    "snippet": {
                      "text": "from gatherData import GatherData\nfrom generateSignals import GenerateSignals\nfrom orderManagement import OrderManagement\nfrom positionManagement import PositionManagement"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "08b8158848d04787",
              "equalIndicator/v1": "31dbb3cd09407e1b81b16b9b7f6e73f1c3e9f8cb38673a436a281fb9bbad16b9"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'WebSocketConnectionClosedException'",
              "markdown": "Unused import statement `WebSocketConnectionClosedException`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "deribit_api.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 6,
                    "startColumn": 42,
                    "charOffset": 143,
                    "charLength": 34,
                    "snippet": {
                      "text": "WebSocketConnectionClosedException"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 4,
                    "startColumn": 1,
                    "charOffset": 54,
                    "charLength": 150,
                    "snippet": {
                      "text": "import json\nfrom collections import OrderedDict\nfrom websocket import create_connection, WebSocketConnectionClosedException\n\nclass RestClient(object):"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "63b55a4a7b703375",
              "equalIndicator/v1": "3fbe952fd68ba018ece92bc23457b9ac84e41301ba0a0a2043da045116d15144"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import time, hashlib, base64'",
              "markdown": "Unused import statement `import time, hashlib, base64`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "deribit_api.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 25,
                    "charLength": 28,
                    "snippet": {
                      "text": "import time, hashlib, base64"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 101,
                    "snippet": {
                      "text": "# -*- coding: utf-8 -*-\n\nimport time, hashlib, base64\nimport json\nfrom collections import OrderedDict"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "296f2a9ec9ecc28e",
              "equalIndicator/v1": "4d37eff2a8bb6d0ea27ba82455aa4ec5d24bb48966e03ef7917354b022b8c23f"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'from orderManagement import OrderManagement'",
              "markdown": "Unused import statement `from orderManagement import OrderManagement`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "generateSignals.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 43,
                    "snippet": {
                      "text": "from orderManagement import OrderManagement"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 83,
                    "snippet": {
                      "text": "from orderManagement import OrderManagement\nfrom decimal import Decimal\nimport math"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "1ed2cfea513194cb",
              "equalIndicator/v1": "50f68c198fbebae52f0687b04b3dc8b3185d75423cde977bb14a9d79ae3ea8ed"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import math'",
              "markdown": "Unused import statement `import math`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "gatherData.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 57,
                    "charLength": 11,
                    "snippet": {
                      "text": "import math"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 175,
                    "snippet": {
                      "text": "from decimal import Decimal, ROUND_HALF_DOWN\nimport time\nimport math\nfrom deribit_api import RestClient as DERIBITClassClient\nfrom deribit_V2_API_Websocket import Deribitv2API"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "e301004b3d004869",
              "equalIndicator/v1": "5c2120694ee69be7ea89abb3bad99fa260f44471cbbb2570cdfe327dca441374"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'from decimal import Decimal'",
              "markdown": "Unused import statement `from decimal import Decimal`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "orderManagement.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 36,
                    "charLength": 27,
                    "snippet": {
                      "text": "from decimal import Decimal"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 89,
                    "snippet": {
                      "text": "from order import Order\nimport time\nfrom decimal import Decimal\n\nclass OrderManagement():"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "79ede9997922c2de",
              "equalIndicator/v1": "6f2c1d6c3adb80fb710dcf91808737e2d276354b371c7636c569ac81ebcc89da"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import math'",
              "markdown": "Unused import statement `import math`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "algorithmScaling.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 7,
                    "startColumn": 1,
                    "charOffset": 224,
                    "charLength": 11,
                    "snippet": {
                      "text": "import math"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 5,
                    "startColumn": 1,
                    "charOffset": 172,
                    "charLength": 65,
                    "snippet": {
                      "text": "from order import Order\nfrom decimal import Decimal\nimport math\n\n"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "05a899351fa6717c",
              "equalIndicator/v1": "6fdada32eb0d388c4483836de4fa03925a7f8fadea256e140f98b5dfeae7634a"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import time'",
              "markdown": "Unused import statement `import time`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "deribit_V2_API_Websocket.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 88,
                    "charLength": 11,
                    "snippet": {
                      "text": "import time"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 122,
                    "snippet": {
                      "text": "from websocket import create_connection, WebSocketConnectionClosedException\nimport json\nimport time\n\nclass Deribitv2API():"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "2e8c1cb51fd78d11",
              "equalIndicator/v1": "73693bb0746e4c1ca008149a7dbf7c8dc76bfdf1d7d4fc4aa912b0344ce50692"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import json'",
              "markdown": "Unused import statement `import json`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "gatherData.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 7,
                    "startColumn": 1,
                    "charOffset": 205,
                    "charLength": 11,
                    "snippet": {
                      "text": "import json"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 5,
                    "startColumn": 1,
                    "charOffset": 126,
                    "charLength": 111,
                    "snippet": {
                      "text": "from deribit_V2_API_Websocket import Deribitv2API\nfrom threading import Thread\nimport json\n\nclass GatherData():"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "2d69262d0123f6ba",
              "equalIndicator/v1": "961fb1a3794ad6cb9b06012fe762b1765aab28eb3831cc6d3533c5b2e3e12e31"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'from gatherData import GatherData'",
              "markdown": "Unused import statement `from gatherData import GatherData`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "algorithmScaling.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 33,
                    "snippet": {
                      "text": "from gatherData import GatherData"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 121,
                    "snippet": {
                      "text": "from gatherData import GatherData\nfrom generateSignals import GenerateSignals\nfrom orderManagement import OrderManagement"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "b43816c6eee9a48b",
              "equalIndicator/v1": "acf2e0f99ea08d63b11f0a1c0a8617f67314b69406b5c09d276a2717aba9870d"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'from collections import OrderedDict'",
              "markdown": "Unused import statement `from collections import OrderedDict`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "deribit_api.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 5,
                    "startColumn": 1,
                    "charOffset": 66,
                    "charLength": 35,
                    "snippet": {
                      "text": "from collections import OrderedDict"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 25,
                    "charLength": 153,
                    "snippet": {
                      "text": "import time, hashlib, base64\nimport json\nfrom collections import OrderedDict\nfrom websocket import create_connection, WebSocketConnectionClosedException\n"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "6cec3217a901a980",
              "equalIndicator/v1": "b08e9fc930d980e6d7d548f84459055f122a0e3fc971e38d899ae22e485d00e7"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "warning",
            "message": {
              "text": "Unused import statement 'import math'",
              "markdown": "Unused import statement `import math`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "generateSignals.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 1,
                    "charOffset": 72,
                    "charLength": 11,
                    "snippet": {
                      "text": "import math"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 109,
                    "snippet": {
                      "text": "from orderManagement import OrderManagement\nfrom decimal import Decimal\nimport math\n\nclass GenerateSignals():"
                    },
                    "sourceLanguage": "Python"
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "DERIBIT",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v2": "5894da45513803d4",
              "equalIndicator/v1": "ba0792cabd4a59ae998c92cfb8f9bef9f8c26119c45adf5bc8ea349428480e45"
            },
            "properties": {
              "ideaSeverity": "WARNING",
              "qodanaSeverity": "High"
            }
          }
        ],
        "configProfile": "starter",
        "deviceId": "060424185848088-8cea-4bbf-89c2-a3e4af25b8f3",
        "qodanaNewResultSummary": {
          "high": 6,
          "moderate": 326,
          "total": 332
        }
      }
    }
  ],
  "properties": {
    "runTimestamp": "1714442841993"
  }
}